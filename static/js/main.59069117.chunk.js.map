{"version":3,"sources":["config/awsConfig.js","components/shared/TTBLogo.jsx","utils/sessions.js","utils/sessionManager.js","components/layout/Centered.jsx","components/shared/WelcomeBanner.jsx","components/shared/SpinnerText.jsx","utils/dataUtil.js","utils/formUtil.js","components/shared/SpinnerButton.jsx","components/app/VideoUploadForm.jsx","routes/UploadPage.jsx","routes/HistoryPage.jsx","routes/ProtectedApp.jsx","routes/LoginPage.jsx","routes/Logout.jsx","routes/RegistrationPage.jsx","routes/VerificationPage.jsx","Routes.jsx","App.js","serviceWorker.js","index.js"],"names":["AWS_CONFIG","cognito","userPoolId","userPoolWebClientId","region","api","invokeUrl","videoBucket","TTBLogo","props","src","alt","emptySessionObj","setSessionCookie","session","Cookies","expires","getSessionCookie","sessionCookie","undefined","JSON","parse","e","console","error","sessionManager","React","createContext","getSession","setSession","obj","getSessionProp","propName","defaultPropValue","isAuthenticated","Object","keys","indexOf","setSessionProp","value","email","isAdmin","isTutor","getAuthToken","getUsername","getName","centerIt","comp","Container","className","Row","Col","xs","lg","WelcomeBanner","show","useState","showBanner","setShowBanner","Jumbotron","fluid","Button","aria-label","onClick","variant","size","href","target","aria-hidden","role","SpinnerText","spinning","label","Spinner","as","animation","request","a","fetchUrlObj","method","body","tableName","Promise","resolve","reject","authToken","params","crossdomain","dataType","headers","Headers","stringify","searchParams","append","fetch","then","response","json","getCloudData","pre","query","validator","victory","defeat","getDataUrlObj","URL","forEach","queryKey","result","reason","getResponse","resource","dataValues","url","objectKey","contentType","toUsername","replace","toUniqueArray","objArr","key","arrayOfKeys","controlSwitch","controlType","controlProps","required","selectFrom","Form","Control","arr","withEmpty","optionsComp","push","toOptions","File","FormikControl","horizontal","displayName","id","helpText","learnMore","errors","touched","formGroupProps","Group","controlId","Label","name","Feedback","type","Text","muted","rel","FormikSelect","FormikFile","renderFields","fields","handleChange","values","other","length","map","fieldData","index","formikValues","fieldName","formFieldId","onChange","split","renderSelect","validationProps","renderFile","renderControl","formatTime","seconds","mill","hoursRemaining","Math","floor","minutesRemaining","secondsRemaining","timeAr","join","formatBytes","b","c","d","log","parseFloat","pow","toFixed","SpinnerButton","disabled","uploadFormSchema","Yup","shape","tutorName","chapterName","chapterNumber","chapterPart","title","file","VideoUploadForm","formData","bookData","videoData","Items","displayedBooks","setDisplayedBooks","selectedSubject","setSelectedSubject","selectedLanguage","setSelectedLanguage","validated","setValidated","progress","setProgress","uploadedBytes","setUploadedBytes","totalBytes","setTotalBytes","setError","warning","setWarning","showSuccessMsg","setShowSuccessMsg","ultimateFormData","setUltimateFormData","showUploadProgress","setShowUploadProgress","submittingForm","setSubmittingForm","uploadXhr","setUploadXhr","timeStarted","setTimeStarted","formRef","useRef","classInfoFields","filter","dataItems","section","tutorInfoFields","sort","order","bookInfoFields","videoInfoFields","getFiltered","filterKey","filterValue","items","eachItem","getSubjectFilteredBooks","subject","getSubjectORLanguageFilteredBooks","language","filteredBooks","getSubjectLanguageFilteredBooks","firstUnique","useEffect","displayedLanguages","bookNames","initFormValues","bookLanguage","bookName","formReset","current","reset","sendFile","formValues","signedURL","get","xhr","XMLHttpRequest","upload","addEventListener","lengthComputable","percentage","round","loaded","total","open","overrideMimeType","onreadystatechange","readyState","DONE","status","HEADERS_RECEIVED","updateVideoMetaData","send","Date","timeElapsed","uploadSpeed","eta","getNewProgress","Modal","aria-labelledby","centered","Header","Title","Body","class","style","width","aria-valuenow","aria-valuemin","aria-valuemax","Footer","event","abort","initialValues","onSubmit","setSubmitting","isValid","uploadFileField","document","querySelector","uploadFile","files","data","FormData","validationSchema","handleReset","handleSubmit","classVal","noValidate","ref","newSubject","placeholder","readOnly","ButtonToolbar","ButtonGroup","Alert","UploadPage","formLoading","setFormLoading","showForm","setShowForm","showFormError","setShowFormError","videoMetaData","setVideoMetaData","booksMetaData","setBooksMetaData","Count","videoMetadata","textStatus","jqXHR","sm","md","closeLabel","dismissible","onClose","to","HistoryPage","historyDataValue","setHistoryData","UploadVideo","options","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","showTotal","alwaysShowAllBtns","sizePerPageList","text","onPageChange","page","sizePerPage","onSizePerPageChange","striped","keyField","columns","dataField","defaultSorted","pagination","paginationFactory","ProtectedAppBody","userData","path","ProtectedApp","location","useLocation","displayedUserDetails","placement","Navbar","bg","expand","sticky","Brand","Toggle","aria-controls","Collapse","Nav","defaultActiveKey","marginLeft","marginRight","Link","pathname","Item","activeClassName","marginTop","display","LoginPage","afterLogin","setEmail","pass","setPass","submitting","setStatus","history","useHistory","login","preventDefault","Auth","signIn","signInResult","token","signInUserSession","idToken","jwtToken","cookieObj","attributes","showWelcomeBanner","message","Logout","afterLogout","remove","signOut","RegistrationPage","afterRegister","setName","pass2","setPass2","register","signUp","username","password","VerificationPage","stickyEmail","code","setCode","confirmSignUp","ProtectedRoute","children","rest","render","state","from","Routes","setUserData","setStickyEmail","basename","exact","Amplify","configure","App","Boolean","window","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.59069117.chunk.js","sourcesContent":["const AWS_CONFIG = {\r\n    cognito: {\r\n        userPoolId: 'ap-south-1_goMJyvOwY',\r\n        userPoolWebClientId: '6pvgee8erngn4d70buf5ulnefs',\r\n        region: 'ap-south-1'\r\n    },\r\n    api: {\r\n        invokeUrl: 'https://1bb73f90n5.execute-api.ap-south-1.amazonaws.com/test'\r\n    },\r\n    videoBucket: 'test-turnthebus-upload',\r\n};\r\n\r\nexport default AWS_CONFIG;","import React from \"react\";\r\n\r\nexport const TTBLogo = (props) => {\r\n    return (\r\n        <>\r\n            <img src=\"https://turnthebus.org/images/turn-the-bus-logo.png\" alt=\"Seattle Public Library Logo\" />\r\n        </>\r\n    );\r\n}","import React from \"react\";\r\nimport * as Cookies from \"js-cookie\";\r\nexport const emptySessionObj = {};\r\nexport const setSessionCookie = (session) => {\r\n    Cookies.remove(\"user-session\");\r\n    Cookies.set(\"user-session\", session, { expires: 14 });\r\n};\r\n\r\nexport const getSessionCookie = () => {\r\n    const sessionCookie = Cookies.get(\"user-session\");\r\n    if (sessionCookie === undefined) {\r\n        return emptySessionObj;\r\n    } else {\r\n        try {\r\n            const sessionObject = JSON.parse(sessionCookie);\r\n            return sessionObject;\r\n        } catch (e) {\r\n            console.error('Corrupted session cookie');\r\n            Cookies.remove(\"user-session\");\r\n            return emptySessionObj;\r\n        }\r\n    }\r\n};\r\n\r\nexport const SessionContext = React.createContext(getSessionCookie());\r\n","import { getSessionCookie, setSessionCookie } from './sessions';\r\nconst sessionManager = {\r\n    getSession: () => getSessionCookie('tutor-session'),\r\n    setSession: (obj) => setSessionCookie(obj),\r\n    getSessionProp: (propName, defaultPropValue = false) => sessionManager.isAuthenticated()\r\n        ? (\r\n            Object.keys(sessionManager.getSession()).indexOf(propName) !== -1\r\n                ? sessionManager.getSession()[propName]\r\n                : defaultPropValue\r\n            )\r\n        : defaultPropValue,\r\n    setSessionProp: (propName, value) => {\r\n        sessionManager.isAuthenticated() && sessionManager.setSession({\r\n            ...sessionManager.getSession(),\r\n            [propName]: value\r\n        })\r\n    },\r\n    isAuthenticated: () => sessionManager.getSession()?.email || false,\r\n    isAdmin: () => sessionManager.getSessionProp('isAdmin'),\r\n    isTutor: () => sessionManager.getSessionProp('isTutor', true),\r\n    getAuthToken: () => sessionManager.getSessionProp('authToken'),\r\n    getUsername: () => sessionManager.getSessionProp('email'),\r\n    getName:  () => sessionManager.getSessionProp('name'),\r\n};\r\n\r\nexport default sessionManager;","import React from 'react';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nexport const centerIt = (comp) => {\r\n    return (\r\n        <Container className=\"h-100\">\r\n            <Row className=\"h-100\">\r\n                <Col />\r\n                <Col xs={12} lg={6} className=\"align-self-center\">\r\n                {comp}\r\n                </Col>\r\n                <Col />\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\nexport const centeredComp = (WrappedComponent) => {\r\n    return class extends React.Component {\r\n\r\n        render() {\r\n            return centerIt(<WrappedComponent {...this.props} />);\r\n        }\r\n    };\r\n}\r\n\r\n\r\n","import Button from 'react-bootstrap/Button'\r\nimport { centerIt } from '../layout/Centered';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport React, { useState } from 'react';\r\nimport sessionManager from '../../utils/sessionManager';\r\n\r\nconst BANNER_PROP_NAME = 'show-welcome-banner';\r\n\r\nconst WelcomeBanner = () => {\r\n    const show = sessionManager.getSessionProp(BANNER_PROP_NAME, true);\r\n    const [showBanner, setShowBanner] = useState(show);\r\n    return ( showBanner && (\r\n        <Jumbotron fluid className=\"welcome-banner\">\r\n            <Button\r\n                aria-label=\"dismiss banner\"\r\n                className=\"close-btn\"\r\n                onClick={() => {\r\n                    sessionManager.setSessionProp(BANNER_PROP_NAME, false);\r\n                    setShowBanner(false);\r\n                }}\r\n                variant=\"outline-dark\"\r\n                size=\"sm\">\r\n                    Dismiss\r\n            </Button> \r\n            {centerIt(\r\n                <>\r\n                    <h1 className=\"display-4\">स्वागत है</h1>\r\n                    <p className=\"lead\">नमस्ते दोस्तों। टर्न द बस के साथ ऑनलाइन पढ़ाने के लिए धन्यवाद! कृपया इस फॉर्म का उपयोग अपने वीडियो का विवरण प्रस्तुत करने के लिए करें।</p>\r\n                    <p className=\"lead\">Namaste, friends. Thank you for teaching online with Turn the Bus! Please use this form to submit the details of your video.</p>\r\n                    <p className=\"lead\">\r\n                        <Button variant=\"link\" href=\"https://www.turnthebus.org/\" target=\"_blank\">\r\n                        <span aria-hidden role=\"img\">🌐</span>\r\n                            turnthebus.org</Button>\r\n                    </p>\r\n                </>\r\n            )}\r\n        </Jumbotron>\r\n    )\r\n    )\r\n};\r\n\r\n\r\nexport default WelcomeBanner;\r\n","import React from 'react';\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nconst SpinnerText = ({spinning, label}) => {\r\n    return (spinning &&\r\n        (<>\r\n            {label}{` `}\r\n            <Spinner\r\n                as=\"span\"\r\n                animation=\"border\"\r\n                size=\"sm\"\r\n                role=\"status\"\r\n                aria-hidden=\"true\"\r\n            />\r\n        </>)\r\n    );\r\n}\r\n\r\nexport default SpinnerText;","import AWS_CONFIG from \"../config/awsConfig\";\r\nimport sessionManager from \"./sessionManager\";\r\n\r\nconst NO_AUTH_MSG = 'No auth token';\r\n\r\nexport const request = async ({fetchUrlObj, method = 'GET', body, tableName = ''}) => {\r\n    return new Promise((resolve, reject) => {\r\n        const authToken = sessionManager.getAuthToken();\r\n        if (!authToken) {\r\n            console.error(NO_AUTH_MSG);\r\n            reject({});\r\n        }\r\n\r\n        if (!fetchUrlObj) {\r\n            console.error('No or invalid url');\r\n            reject({});\r\n        }\r\n        try {\r\n            const params = {\r\n                'Content-Type': 'application/json',\r\n                crossdomain: true,\r\n                dataType: 'json',\r\n                headers: new Headers({\r\n                    'Authorization': authToken\r\n                }),\r\n        };\r\n            if (method !== 'GET') {\r\n                params.method = 'POST';\r\n                params.body = JSON.stringify(body)\r\n            } else {\r\n                tableName && fetchUrlObj.searchParams.append('tableName', tableName);\r\n            }\r\n            resolve(fetch(fetchUrlObj, params).then(response => response.json()));\r\n        }\r\n        catch (e) {\r\n            console.error('error fetching response', e);\r\n            reject({});\r\n        }\r\n    });\r\n}\r\n\r\nexport const setCouldData = ({\r\n    pre,\r\n    name,\r\n    query,\r\n    validator,\r\n    victory,\r\n    defeat,\r\n    body\r\n}) => {\r\n    pre();\r\n    const setDataUrl = new URL(\"https://indmrclke8.execute-api.us-west-2.amazonaws.com/dev/add\");\r\n    setDataUrl.searchParams.append('objectName', name);\r\n    if (query) {\r\n        Object.keys(query).forEach(queryKey => {\r\n            setDataUrl.searchParams.append(queryKey, query[queryKey]);\r\n        })\r\n    }\r\n    request({\r\n        fetchUrlObj: setDataUrl,\r\n        method: 'POST',\r\n        body\r\n    }).then((response) => {\r\n        if (validator(response)) {\r\n            victory(response?.data)\r\n        } else {\r\n            defeat()\r\n        }\r\n    }, (reason) => {\r\n        defeat(reason)\r\n    });\r\n}\r\n\r\nexport const getCloudData = ({\r\n    pre = () => {},\r\n    tableName,\r\n    query,\r\n    validator,\r\n    victory,\r\n    defeat\r\n}) => {\r\n    pre();\r\n    const getDataUrlObj = new URL(`${AWS_CONFIG.api.invokeUrl}/scantable`);\r\n    if (query) {\r\n        Object.keys(query).forEach(queryKey => {\r\n            getDataUrlObj.searchParams.append(queryKey, query[queryKey]);\r\n        })\r\n    }\r\n    request({\r\n        fetchUrlObj: getDataUrlObj,\r\n        tableName\r\n    }).then((response) => {\r\n        if (validator(response)) {\r\n            victory(response?.result)\r\n        } else {\r\n            defeat()\r\n        }\r\n    }, (reason) => {\r\n        defeat(reason)\r\n    });\r\n}\r\n\r\nexport const getResponse = ({\r\n    pre = () => {},\r\n    resource = 'getsignedurl',\r\n    dataValues,\r\n    validator,\r\n    victory,\r\n    defeat,\r\n}) => {\r\n    try{\r\n        pre();\r\n        const authToken = sessionManager.getAuthToken();\r\n        if (!authToken) {\r\n            console.error(NO_AUTH_MSG);\r\n            defeat(NO_AUTH_MSG);\r\n        }\r\n        const url = new URL(`${AWS_CONFIG.api.invokeUrl}/${resource}`);\r\n        url.searchParams.append('bucket', AWS_CONFIG.videoBucket);\r\n        Object.keys(dataValues).forEach((objectKey) => {\r\n            url.searchParams.append(objectKey, dataValues[objectKey]);\r\n        });\r\n        fetch(\r\n            url,\r\n            {\r\n                crossdomain: true,\r\n                contentType: 'application/json',\r\n                dataType: 'json',\r\n                headers: new Headers({\r\n                    'Authorization': authToken\r\n                }),\r\n            }\r\n        )\r\n        .then(response => response.json())\r\n        .then(\r\n            (response) => {\r\n                if(validator(response)){\r\n                    victory(response);\r\n                } else {\r\n                    defeat(response);\r\n                }\r\n            }\r\n        )\r\n    } catch (e) {\r\n        console.error('Error getting video upload URL!');\r\n        defeat(e);\r\n    }\r\n}\r\n","import { Col, Form } from 'react-bootstrap';\r\nimport React from 'react';\r\n\r\nexport const toUsername = (email) => {\r\n    return email.replace('@', '-at-');\r\n}\r\n\r\nexport const renderOptions = (objs, value, display) => {\r\n    const optionsComp = [\r\n        <option key='empty-option' value=''>Please select</option>\r\n    ];\r\n    objs.forEach(obj => {\r\n        optionsComp.push(<option key={obj[value]} value={obj[value]}>{obj[display]}</option>)\r\n    }\r\n    );\r\n    return (<>\r\n        {optionsComp}\r\n    </>);\r\n}\r\n\r\nexport const toUniqueArray = (objArr, key) => {\r\n    let arrayOfKeys = [];\r\n    objArr.forEach(obj => {\r\n        arrayOfKeys[obj[key]] = '';\r\n    })\r\n    return Object.keys(arrayOfKeys);\r\n}\r\n\r\nexport const toOptions = (arr, withEmpty = false) => {\r\n    const optionsComp = withEmpty ? [\r\n        <option key='empty-option' value=''>Please select</option>\r\n    ] : [];\r\n\r\n    arr.forEach(obj => {\r\n        optionsComp.push(<option key={obj} value={obj}>{obj}</option>)\r\n    }\r\n    );\r\n    return (<>\r\n        {optionsComp}\r\n    </>);\r\n}\r\n\r\nexport const controlSwitch = ({\r\n    controlType,\r\n    controlProps,\r\n    required,\r\n    selectFrom,\r\n}) => {\r\n    switch(controlType) {\r\n        case 'select':\r\n            return (<Form.Control\r\n                {...controlProps}\r\n                as={controlType}\r\n                required={required}\r\n            >\r\n                    {selectFrom && toOptions(selectFrom)}\r\n            </Form.Control>)\r\n        case 'file':\r\n            return (\r\n                <Form.File \r\n                    {...controlProps}\r\n                    // custom\r\n                    required={required}\r\n                />\r\n            )\r\n        default:\r\n            return (<Form.Control\r\n                {...controlProps}\r\n                as={controlType}\r\n                required={required}\r\n            />);\r\n    }\r\n}\r\n\r\nexport const FormikControl = ({\r\n    horizontal,\r\n    displayName,\r\n    required,\r\n    id,\r\n    controlType,\r\n    selectFrom,\r\n    helpText,\r\n    learnMore,\r\n    touched,\r\n    errors,\r\n    ...controlProps\r\n}) => {\r\n    const formGroupProps = {};\r\n    if(horizontal) {\r\n        formGroupProps['as'] = Col;\r\n    }\r\n    // console.debug(controlProps ? controlProps.name : 'non', errors);\r\n    return (\r\n        <Form.Group controlId={id} {...formGroupProps}>\r\n                <Form.Label>{displayName}</Form.Label>\r\n                {required && <span className=\"red\">*</span>}\r\n                { controlSwitch({\r\n                    controlType,\r\n                    controlProps,\r\n                    required,\r\n                    selectFrom,\r\n                })}\r\n                {\r\n                    errors &&\r\n                    errors[controlProps.name] \r\n                    ? (\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors[controlProps.name]}\r\n                        </Form.Control.Feedback>\r\n                    ) : ''\r\n                }\r\n                <Form.Text muted>\r\n                    {typeof helpText === 'function' ? helpText() : (helpText || '')}\r\n                    {learnMore ? (\r\n                        <>\r\n                            {` `}<a target=\"_blank\" rel=\"noopener noreferrer\" href={learnMore}>Learn more</a>\r\n                        </>\r\n                    ): ''}\r\n                </Form.Text>\r\n        </Form.Group>\r\n    );\r\n}\r\n\r\nexport const FormikSelect = (props) => {\r\n    return (\r\n        <FormikControl {...props} controlType=\"select\" />\r\n    )\r\n}\r\n\r\nexport const FormikFile = (props) => {\r\n    return (\r\n        <FormikControl {...props} controlType=\"file\" />\r\n    )\r\n}\r\n\r\nexport const renderControl = (fieldData, index, values, handleChange, validationProps) => {\r\n    const {\r\n        type,\r\n        fieldName,\r\n        formFieldId,\r\n        ...other\r\n    } = fieldData;\r\n    return (\r\n        fieldName\r\n        && formFieldId\r\n        && type\r\n        ? (<FormikControl\r\n            {...validationProps}\r\n            {...other}\r\n            key={`${formFieldId}-${index}`}\r\n            controlType={type}\r\n            displayName={fieldName}\r\n            id={formFieldId}\r\n            name={formFieldId}\r\n            value={values[formFieldId]}\r\n            onChange={handleChange}\r\n        />) : 'Error rendering field');\r\n}\r\n\r\nexport const renderSelect = (fieldData, index, formikValues, handleChange, horizontal) => {\r\n    const {\r\n        fieldName,\r\n        formFieldId,\r\n        values,\r\n        ...other\r\n    } = fieldData;\r\n    return (\r\n        fieldName\r\n        && formFieldId\r\n        && values\r\n        ? (<FormikSelect\r\n            {...other}\r\n            key={`${formFieldId}-${index}`}\r\n            displayName={fieldName}\r\n            id={formFieldId}\r\n            name={formFieldId}\r\n            value={formikValues[formFieldId]}\r\n            onChange={handleChange}\r\n            selectFrom={values?.split(',')}\r\n        />) : 'Error rendering select field.');\r\n}\r\n\r\nexport const renderFile = (fieldData, index, formikValues, handleChange, validationProps) => {\r\n    const {\r\n        fieldName,\r\n        formFieldId,\r\n        ...other\r\n    } = fieldData;\r\n    // console.debug('renderFile', fieldName, validationProps);\r\n    return (\r\n        fieldName\r\n        && formFieldId\r\n        ? (<FormikFile\r\n            {...validationProps}\r\n            {...other}\r\n            key={`${formFieldId}-${index}`}\r\n            displayName={fieldName}\r\n            id={formFieldId}\r\n            name={formFieldId}\r\n            value={formikValues[formFieldId]}\r\n            onChange={handleChange}\r\n        />) \r\n        : 'Error rendering file field'\r\n    )\r\n}\r\n\r\nexport const renderFields = ({\r\n    fields,\r\n    handleChange,\r\n    horizontal = false,\r\n    values,\r\n    ...other\r\n}) => {\r\n    if(fields?.length) {\r\n        return fields.map((fieldData, index) => {\r\n            switch(fieldData?.type) {\r\n                case 'select': {\r\n                    return renderSelect({\r\n                        horizontal,\r\n                        ...fieldData\r\n                    }, index, values, handleChange)\r\n                }\r\n                case 'file': {\r\n                    return renderFile({\r\n                        horizontal,\r\n                        ...fieldData\r\n                    }, index, values, handleChange, other)\r\n                }\r\n                default:\r\n                    return renderControl({\r\n                        horizontal,\r\n                        ...fieldData,\r\n                    }, index, values, handleChange, other)\r\n            }\r\n        });\r\n    }\r\n    return 'No Fields to render.'\r\n}\r\n\r\nexport const formatTime = (seconds) => {\r\n    let mill = seconds * 1000;\r\n    let hoursRemaining = (Math.floor(mill / 1000 / 60 / 60)) % 24;\r\n    let minutesRemaining = (Math.floor(mill / 1000 / 60)) % 60;\r\n    let secondsRemaining = (Math.floor(mill / 1000)) % 60;\r\n    let timeAr = []\r\n    if (hoursRemaining > 0) {\r\n        timeAr.push(`${hoursRemaining} hours`);\r\n    }\r\n    if (minutesRemaining > 0) {\r\n        timeAr.push(`${minutesRemaining} minutes`);\r\n    }\r\n    if (secondsRemaining > 0) {\r\n        timeAr.push(`${secondsRemaining} seconds`);\r\n    }\r\n    return timeAr.length ? timeAr.join(', ') + ' remaining' : '';\r\n}\r\n\r\nexport const formatBytes = (a, b = 2) => {\r\n    if (0 === a) return \"0 Bytes\";\r\n    const c = 0 > b ? 0 : b, d = Math.floor(Math.log(a) / Math.log(1024));\r\n    return parseFloat((a / Math.pow(1024, d)).toFixed(c)) + \" \" + [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"][d];\r\n}\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport SpinnerText from './SpinnerText';\r\n\r\nexport const SpinnerButton = ({ spinning, label, ...other }) => {\r\n    return (\r\n        <>\r\n            <Button\r\n                disabled={spinning}\r\n                {...other}\r\n            >\r\n                { spinning ? (<SpinnerText spinning={spinning} label={label} />) : label}\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\n","import { Formik } from 'formik';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Alert, Button, ButtonGroup, ButtonToolbar, Form, Modal } from 'react-bootstrap';\r\nimport * as Yup from 'yup';\r\nimport { getResponse } from '../../utils/dataUtil';\r\nimport { formatBytes, formatTime, FormikSelect, renderFields, toUniqueArray } from '../../utils/formUtil';\r\nimport { SpinnerButton } from '../shared/SpinnerButton';\r\n\r\nconst uploadFormSchema = Yup.object().shape({\r\n    tutorName: Yup.string()\r\n      .required('Please provide a tutor name.'),\r\n    chapterName: Yup.string()\r\n      .required('Please provide a chapter name.'),\r\n    chapterNumber: Yup.string()\r\n      .required('Please provide a chapter number.'),\r\n    chapterPart: Yup.string()\r\n        .required('Please provide a chapter part.'),\r\n    title: Yup.string()\r\n      .required('Please provide a video title.'),\r\n    file: Yup.mixed()\r\n        .required('Please provide an mp4 file.')\r\n  });\r\n\r\nconst VideoUploadForm = ({formData}) => {\r\n    const {bookData, videoData} = formData;\r\n    const [displayedBooks, setDisplayedBooks] = useState(bookData?.Items);\r\n    const [selectedSubject, setSelectedSubject] = useState('English');\r\n    const [selectedLanguage, setSelectedLanguage] = useState('English');\r\n    const [validated, setValidated] = useState(false);\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedBytes, setUploadedBytes] = useState(0);\r\n    const [totalBytes, setTotalBytes] = useState(0);\r\n    const [error, setError] = useState();\r\n    const [warning, setWarning] = useState();\r\n    const [showSuccessMsg, setShowSuccessMsg] = useState(false);\r\n    const [ultimateFormData, setUltimateFormData] = useState();\r\n    const [showUploadProgress, setShowUploadProgress] = useState(false);\r\n    const [submittingForm, setSubmittingForm] = useState(false);\r\n    const [uploadXhr, setUploadXhr] = useState(false);\r\n    const [timeStarted, setTimeStarted] = useState(false);\r\n    const formRef = useRef();\r\n\r\n    const classInfoFields = videoData?.Items?.filter(dataItems => dataItems.section === 'CLASS_INFO') || [];\r\n    const tutorInfoFields = videoData?.Items?.filter(dataItems => dataItems.section === 'TUTOR_INFO').sort((a, b) => a.order - b.order) || [];\r\n    const bookInfoFields = videoData?.Items?.filter(dataItems => dataItems.section === 'BOOK_INFO').sort((a, b) => a.order - b.order) || [];\r\n    const videoInfoFields = videoData?.Items?.filter(dataItems => dataItems.section === 'VIDEO_INFO').sort((a, b) => a.order - b.order) || [];\r\n\r\n    const getFiltered = (filterKey, filterValue, items) => {\r\n        if(items && filterValue) {\r\n            return items?.filter((eachItem) => eachItem[filterKey] === filterValue);\r\n        }\r\n        return items || [];\r\n    }\r\n\r\n    const getSubjectFilteredBooks = (subject) => {\r\n        return getFiltered('SUBJECT', subject, bookData?.Items);\r\n    }\r\n\r\n    const getSubjectLanguageFilteredBooks = (subject, language) => {\r\n        return getFiltered('LANGUAGE', language, getSubjectFilteredBooks(subject));\r\n    }\r\n\r\n    const getSubjectORLanguageFilteredBooks = (subject, language) => {\r\n        const filteredBooks = getSubjectLanguageFilteredBooks(subject, language);\r\n        return filteredBooks?.length ? filteredBooks : getSubjectFilteredBooks(subject);\r\n    }\r\n\r\n    const firstUnique = (items, key) => toUniqueArray(items, key)[0];\r\n\r\n    /* eslint-disable react-hooks/exhaustive-deps */\r\n    useEffect(() => {\r\n        setDisplayedBooks(getSubjectORLanguageFilteredBooks(selectedSubject, selectedLanguage));\r\n    }, [selectedSubject, selectedLanguage]);\r\n    /* eslint-enable react-hooks/exhaustive-deps */\r\n\r\n\r\n\r\n    const displayedLanguages = toUniqueArray(getSubjectFilteredBooks(selectedSubject), 'LANGUAGE');\r\n\r\n    const bookNames = toUniqueArray(displayedBooks, 'BOOK_NAME');\r\n\r\n    const initFormValues = {\r\n        tutorName: '',\r\n        subject: selectedSubject,\r\n        bookLanguage: displayedLanguages[0],\r\n        bookName: bookNames[0]\r\n    };\r\n\r\n    const formReset = () => {\r\n        if (formRef && formRef.current) {\r\n            formRef.current.reset();\r\n        }\r\n    }\r\n\r\n    const updateVideoMetaData = (formValues) => {\r\n        if (formValues) {\r\n            // const dataValues = {};\r\n            // formData.forEach(function(value, key){\r\n            //     dataValues[key] = value;\r\n            // });\r\n            // console.debug('dataValues', dataValues);\r\n            getResponse({\r\n                pre: () => {},\r\n                resource: 'updatevideometadata',\r\n                dataValues: formValues,\r\n                validator: () => true,\r\n                victory: () => {\r\n                    setShowUploadProgress(false);\r\n                    setShowSuccessMsg(true);\r\n                    setValidated(false);\r\n                    formReset();\r\n                },\r\n                defeat: (response) => {\r\n                    setError('POST: Could not update video data. Please check console/network logs.');\r\n                },\r\n            })\r\n        } else {\r\n            setError('Sever Error: Unknown uploaded filename. Please check console/network logs.')\r\n        }\r\n    }\r\n\r\n    const cancelUploadHandler = event => {\r\n        if (uploadXhr) {\r\n            uploadXhr.abort();\r\n            setWarning('Upload canceled!');\r\n        }\r\n        setShowUploadProgress(false);\r\n    }\r\n\r\n    const getNewProgress = () => {\r\n        let timeElapsed = (new Date()) - timeStarted;\r\n        let uploadSpeed = uploadedBytes / (timeElapsed / 1000);\r\n        const newEstimatedTime = (totalBytes - uploadedBytes) / uploadSpeed;\r\n\r\n        return {\r\n            eta: formatTime(newEstimatedTime),\r\n            uploadSpeed: Math.round(uploadSpeed / 1000),\r\n        };\r\n    };\r\n\r\n    const sendFile = (formData, formValues, signedURL) => {\r\n    if (signedURL && formData.get('file') && formData.get('file').name) {\r\n        setShowUploadProgress(true);\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.upload.addEventListener(\"progress\", function (e) {\r\n            if (e.lengthComputable) {\r\n                const percentage = Math.round((e.loaded * 100) / e.total);\r\n                setTotalBytes(e.total);\r\n                setUploadedBytes(e.loaded);\r\n                setProgress(percentage);\r\n            }\r\n        }, false);\r\n\r\n        xhr.open('POST', signedURL.url);\r\n        xhr.overrideMimeType('text/plain; charset=x-user-defined-binary');\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState === XMLHttpRequest.DONE && (xhr.status === 200 || xhr.status === 204)) {\r\n                updateVideoMetaData(formValues);\r\n            }\r\n            else if (xhr.readyState !== XMLHttpRequest.HEADERS_RECEIVED) {\r\n                console.error('POST: Server response error. Please check console/network logs.')\r\n            }\r\n        };\r\n        xhr.send(formData);\r\n        setUploadXhr(xhr);\r\n        setTimeStarted(new Date());\r\n    } else {\r\n        !signedURL && setError('Server Error!');\r\n    }\r\n}\r\n\r\nconst {\r\n    eta,\r\n    uploadSpeed,\r\n} = getNewProgress();\r\n\r\n    return (\r\n    <div>\r\n        <Modal\r\n            show={showUploadProgress}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Uploading ({uploadSpeed} KB/s)\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div>\r\n                    <span id=\"uploadDataDone\"></span>\r\n                        <span id=\"uploadDataTotal\">\r\n                            {formatBytes(uploadedBytes)} / {formatBytes(totalBytes)}\r\n                        </span>\r\n                        <br />\r\n                        <small>\r\n                            {eta} \r\n                        </small>\r\n                        <div id=\"uploadProgressBarCtr\" class=\"progress\">\r\n                            <span id=\"uploadProgressValue\">{`${progress}%`}</span>\r\n                            <div\r\n                                id=\"uploadProgressBar\"\r\n                                class=\"progress-bar\"\r\n                                style={{\r\n                                    width: `${progress}%`,\r\n                                }}\r\n                                role=\"progressbar\"\r\n                                aria-valuenow={progress}\r\n                                aria-valuemin=\"0\"\r\n                                aria-valuemax=\"100\"\r\n                            >&nbsp;</div>\r\n                        </div>\r\n                    <small>{ultimateFormData?.key || 'No File'}</small>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button\r\n                    onClick={cancelUploadHandler}\r\n                >\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n        <h1>Video Upload</h1><br />\r\n        <p>Fields marked with a red asterisk (<span className=\"red\">*</span>) are required fields. Please provide a valid value for these.</p>\r\n        <p>तारांकन चिह्न (<span className=\"red\">*</span>) के साथ चिह्नित प्रश्न अनिवार्य हैं।</p>\r\n        <Formik\r\n            initialValues={initFormValues}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n                setSubmittingForm(true);\r\n                uploadFormSchema\r\n                    .isValid(values)\r\n                    .then(\r\n                        (isValid) => {\r\n                            if(isValid){\r\n                                const uploadFileField = document.querySelector('#file');\r\n                                const uploadFile = uploadFileField && uploadFileField.files && uploadFileField.files[0];\r\n                                const key = uploadFile && uploadFile.name;\r\n                                if(key){\r\n                                    const {\r\n                                        file,\r\n                                        ...formValues\r\n                                    } = values;\r\n                                    const dataValues = {\r\n                                        key,\r\n                                        ...formValues\r\n                                    }\r\n                                    setUltimateFormData(dataValues);\r\n                                    getResponse({\r\n                                        dataValues,\r\n                                        validator: () => true,\r\n                                        victory: (data) => {\r\n                                            let signedURL = data.signedURL;\r\n                                            let formData = new FormData();\r\n                                            // console.debug('signedURL.fields', signedURL.fields);\r\n                                            Object.keys(signedURL.fields).forEach(key => {\r\n                                                formData.append(key, signedURL.fields[key]);\r\n                                            });\r\n                                            formData.append('file', uploadFile);\r\n                                            setSubmittingForm(false);\r\n                                            sendFile(formData, dataValues, signedURL);\r\n                                        },\r\n                                        defeat: (error) => {\r\n                                            console.error(error);\r\n                                            setError('Failed to upload!');\r\n                                        },\r\n                                    })\r\n                                } else {\r\n                                    setError('No file!');\r\n                                }\r\n                            }\r\n                        },\r\n                        (reason) => {\r\n                            console.error(reason);\r\n                            setError('Failed to upload!');\r\n                        },\r\n                    );\r\n                setSubmitting(false);\r\n            }}\r\n            validationSchema={uploadFormSchema}\r\n        >\r\n            {({\r\n                errors,\r\n                handleChange,\r\n                handleReset,\r\n                handleSubmit,\r\n                touched,\r\n                values,\r\n             }) => {\r\n                 const {\r\n                    chapterPart = '',\r\n                    chapterNumber = '',\r\n                    title = '',\r\n                    chapterName = '',\r\n                    bookName = '',\r\n                    class: classVal = ''\r\n                 } = values || {};\r\n                 return (\r\n                    <Form\r\n                        validated={validated}\r\n                        noValidate\r\n                        ref={formRef}\r\n                    >\r\n                        <h2>Tutor Information</h2>\r\n                        {\r\n                            renderFields({\r\n                                errors,\r\n                                fields: tutorInfoFields,\r\n                                handleChange,\r\n                                touched,\r\n                                values,\r\n                            })\r\n                        }\r\n                        <h2>Class Information</h2>\r\n                        <Form.Row>\r\n                        {\r\n                            renderFields({\r\n                                errors,\r\n                                fields: classInfoFields,\r\n                                handleChange,\r\n                                horizontal: true,\r\n                                touched,\r\n                                values,\r\n                            })\r\n                        }\r\n                        </Form.Row>\r\n                        <h2>Book Information</h2>\r\n                        <Form.Row>\r\n                            <FormikSelect\r\n                                horizontal\r\n                                displayName=\"Subject\"\r\n                                required\r\n                                id=\"subject\"\r\n                                name=\"subject\"\r\n                                value={values.subject}\r\n                                onChange={(event) => {\r\n                                    const newSubject = event?.target?.value;\r\n                                    values.bookLanguage = firstUnique(getSubjectFilteredBooks(newSubject), 'LANGUAGE');\r\n                                    values.bookName = firstUnique(getSubjectORLanguageFilteredBooks(newSubject, values.bookLanguage), 'BOOK_NAME');\r\n                                    setSelectedSubject(newSubject);\r\n                                    setSelectedLanguage(values.bookLanguage);\r\n                                    handleChange(event);\r\n                                }}\r\n                                selectFrom={toUniqueArray(bookData?.Items, 'SUBJECT')}\r\n                            />\r\n                            <FormikSelect\r\n                                horizontal\r\n                                displayName=\"Book Language\"\r\n                                required\r\n                                id=\"bookLanguage\"\r\n                                name=\"bookLanguage\"\r\n                                value={values.bookLanguage}\r\n                                onChange={(event) => {\r\n                                    values.bookName = firstUnique(getSubjectORLanguageFilteredBooks(values.subject, event?.target?.value), 'BOOK_NAME');\r\n                                    setSelectedLanguage(event?.target?.value);\r\n                                    handleChange(event);\r\n                                }}\r\n                                selectFrom={displayedLanguages}\r\n                            />\r\n                        </Form.Row>\r\n                        <FormikSelect \r\n                            displayName=\"Book Name\"\r\n                            required\r\n                            id=\"bookName\"\r\n                            name=\"bookName\"\r\n                            value={values.bookName}\r\n                            onChange={handleChange}\r\n                            selectFrom={bookNames}\r\n                        />\r\n                        {\r\n                            renderFields({\r\n                                errors,\r\n                                fields: bookInfoFields,\r\n                                handleChange,\r\n                                values,\r\n                            })\r\n                        }\r\n                        <h2>Video Details</h2>\r\n                        {\r\n                            <Form.Group controlId=\"titlePreview\">\r\n                                <Form.Label>Final Title Preview</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder={values\r\n                                        ? (\r\n                                            chapterPart + ' CH ' + chapterNumber + ' ' + \r\n                                            title + ' ' + chapterName + ' ' + bookName + ' ' + classVal\r\n                                        ) : ''}\r\n                                    readOnly\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                    This will be the final video title on YouTube and EdX.\r\n                                    It is a combination of form fields on this page.\r\n                                    A catchy title can help you hook\r\n                                    viewers. When you create video\r\n                                    titles, it’s a good idea to include keywords your audience is likely to use when looking for\r\n                                    videos like yours.\r\n                                    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://creatoracademy.youtube.com/page/lesson/titles\">Learn more</a>\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                        }\r\n                        {\r\n                            renderFields({\r\n                                errors,\r\n                                fields: videoInfoFields,\r\n                                handleChange,\r\n                                values,\r\n                            })\r\n                        }\r\n                        <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n                            <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n                                <SpinnerButton\r\n                                    type=\"button\"\r\n                                    onClick={(event) => {\r\n                                        setValidated(true);\r\n                                        handleSubmit(event);\r\n                                    }}\r\n                                    spinning={submittingForm}\r\n                                    label='Upload' />\r\n                            </ButtonGroup>\r\n                            <ButtonGroup className=\"mr-2\" aria-label=\"Second group\">\r\n                                <Button\r\n                                    type=\"button\"\r\n                                    variant=\"outline-secondary\"\r\n                                    onClick={(event) => {\r\n                                        setValidated(false);\r\n                                        formReset();\r\n                                        setShowSuccessMsg(false);\r\n                                        handleReset(event);\r\n                                    }}>\r\n                                        clear all\r\n                                </Button>\r\n                            </ButtonGroup>\r\n                        </ButtonToolbar>\r\n                            {showSuccessMsg &&\r\n                                <Alert variant=\"success\">\r\n                                    File uploaded successfully!\r\n                                </Alert>\r\n                            }\r\n                            {warning &&\r\n                                <Alert variant=\"warning\">\r\n                                    {warning}\r\n                                </Alert>\r\n                            }\r\n                            {error &&\r\n                                <Alert variant=\"danger\">\r\n                                    {error}\r\n                                </Alert>\r\n                            }\r\n                    </Form>\r\n                );\r\n             }}\r\n        </Formik>\r\n    </div>\r\n)};\r\n\r\nexport default VideoUploadForm;\r\n","import Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Container from 'react-bootstrap/Container'\r\nimport React, { useEffect, useState } from 'react';\r\nimport WelcomeBanner from '../components/shared/WelcomeBanner';\r\nimport SpinnerText from '../components/shared/SpinnerText';\r\nimport { getCloudData } from '../utils/dataUtil';\r\nimport { Alert } from 'react-bootstrap';\r\nimport VideoUploadForm from '../components/app/VideoUploadForm';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst UploadPage = () => {\r\n    const [formLoading, setFormLoading] = useState(true);\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [showFormError, setShowFormError] = useState(false);\r\n    const [videoMetaData, setVideoMetaData] = useState({});\r\n    const [booksMetaData, setBooksMetaData] = useState({});\r\n\r\n    useEffect(() => {\r\n        getCloudData({\r\n            pre: () => setFormLoading(true),\r\n            tableName: 'videoMetadata',\r\n            validator: (response) => response?.result?.Count >= 0,\r\n            victory: (videoMetadata, textStatus, jqXHR) => {\r\n                setVideoMetaData(videoMetadata);\r\n                getCloudData({\r\n                    tableName: 'booksMetaData',\r\n                    validator: (response) => response?.result?.Count >= 0,\r\n                    victory: (booksMetaData, textStatus, jqXHR) => {\r\n                        setFormLoading(false);\r\n                        setBooksMetaData(booksMetaData);\r\n                        setShowForm(true);\r\n                    },\r\n                    defeat: () => {\r\n                        setFormLoading(false);\r\n                        setShowFormError(true);\r\n                    }\r\n                });\r\n            },\r\n            defeat: () => {\r\n                setFormLoading(false);\r\n                setShowFormError(true);\r\n            }\r\n        });\r\n    }, []\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <WelcomeBanner/>\r\n            {\r\n                <Container className=\"upload-main-content\">\r\n                    <Row>\r\n                        <Col />\r\n                        <Col sm={12} md={8} >\r\n                            <SpinnerText spinning={formLoading} label=\" loading video upload form\" />\r\n                            {!formLoading && !showFormError && showForm && (\r\n                                <VideoUploadForm formData={{\r\n                                    bookData: booksMetaData,\r\n                                    videoData: videoMetaData\r\n                                }} />\r\n                            )}\r\n                            <Alert\r\n                                closeLabel=\"dismiss alert\"\r\n                                dismissible\r\n                                show={showFormError}\r\n                                onClose={() => setShowFormError(false)}\r\n                                variant='danger'\r\n                            >\r\n                                Encountered some error getting form data. <Link to='/login'>Try signing in again.</Link> \r\n                            </Alert>\r\n                        </Col>\r\n                        <Col />\r\n                    </Row>\r\n                </Container>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UploadPage;\r\n","import { getCloudData } from '../utils/dataUtil';\r\nimport React, { useEffect, useState } from 'react';\r\nimport SpinnerText from '../components/shared/SpinnerText';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\n\r\nconst HistoryPage = () =>\r\n{\r\n     \r\n  const [formLoading, setFormLoading] = useState(true);\r\n  const [showFormError, setShowFormError] = useState(false);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [historyDataValue, setHistoryData] = useState([])\r\n\r\n   useEffect(() => {\r\n    getCloudData({\r\n        pre: () => setFormLoading(true),\r\n        tableName: 'UploadVideo',\r\n        validator: (response) => response?.result?.Count >= 0,\r\n        victory: (UploadVideo, textStatus, jqXHR) => {\r\n             setHistoryData(UploadVideo.Items);\r\n             setFormLoading(false);\r\n             setShowForm(true);\r\n         \r\n        },\r\n         defeat: () => {\r\n               setFormLoading(false);\r\n               setShowFormError(true);\r\n          }\r\n    });\r\n}, [] \r\n)\r\nconst defaultSorted = [{\r\n  dataField: 'subject',\r\n  order: 'desc'\r\n}];\r\n\r\nconst options = {\r\n  paginationSize: 5,\r\n  pageStartIndex: 0,\r\n  firstPageText: 'First page',\r\n  prePageText: 'Previous',\r\n  nextPageText: 'Next',\r\n  lastPageText: 'Last Page',\r\n  showTotal: true,\r\n  alwaysShowAllBtns: true,\r\n\r\n  sizePerPageList: [\r\n    {text: 'show 5', value: 5},\r\n    {text: 'show 10', value: 10},\r\n    {text: 'show 15', value: 15},\r\n  ],\r\n  onPageChange: function (page, sizePerPage)\r\n  {\r\n    console.log('page',page);\r\n    console.log('sizePerPage',sizePerPage);\r\n  },\r\n  onSizePerPageChange: function (page, sizePerPage)\r\n  {\r\n    console.log('page', page);\r\n    console.log('sizePerPage', sizePerPage);\r\n  }\r\n  \r\n};\r\n const columns = [\r\n        {dataField: 'subject', text: 'Subject'},\r\n        {dataField: 'videoTitle', text: 'Video Title'},\r\n        {dataField: 'bookName', text: 'Book Name'},\r\n        {dataField: 'chapterName', text: 'Chapter Name'},\r\n        {dataField: 'chapterNumber', text: 'Chapter Number'},\r\n        {dataField: 'chapterPart', text: 'Chapter Part'},\r\n        {dataField: 'videoDescription', text: 'Video Description'},\r\n        {dataField: 'tutorName', text: 'Tutor Name'},\r\n        {dataField: 'fileName', text: 'File Name'}\r\n    \r\n ];\r\nreturn (\r\n  \r\n  <div className=\"App\">\r\n    \r\n     <h3> Video Upload History </h3>\r\n    \r\n     <SpinnerText spinning={formLoading} label=\" loading history data\" />\r\n     {!formLoading && !showFormError && showForm && (\r\n               <BootstrapTable striped  keyField='uploadID' \r\n                   columns={ columns } \r\n                   data={historyDataValue} \r\n                   defaultSorted={defaultSorted}\r\n                   pagination={paginationFactory(options)} \r\n                   id=\"historyTable\"  />\r\n                 \r\n      )}\r\n\r\n  </div>\r\n  \r\n)\r\n\r\n}\r\nexport default HistoryPage;\r\n\r\n","import React from 'react';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport { Link, NavLink, Redirect, Route, Switch, useLocation } from 'react-router-dom';\r\nimport { ToastProvider } from 'react-toast-notifications';\r\nimport { TTBLogo } from '../components/shared/TTBLogo';\r\nimport sessionManager from '../utils/sessionManager';\r\nimport UploadPage from './UploadPage';\r\nimport HistoryPage from './HistoryPage';\r\n\r\nfunction ProtectedApp({ userData }) {\r\n    const location = useLocation();\r\n    const {email, name} = userData;\r\n    if (!email) {\r\n        return (\r\n            <Alert variant='warning'>\r\n                Some error getting your data.\r\n                Please <Link to='/login'> login again. </Link>\r\n            </Alert>\r\n        );\r\n    }\r\n\r\n    const displayedUserDetails =  name && email ? `${userData.name}(${userData.email})` : email;\r\n\r\n    return (\r\n        <>\r\n            <ToastProvider placement='bottom-center' >\r\n                <div className=\"d-flex flex-column app-ctr-lvl-1\">\r\n                    <Navbar bg=\"light\" expand=\"sm\" sticky=\"top\" className=\"top-nav\" >\r\n                        <Navbar.Brand>\r\n                            <TTBLogo />\r\n                        </Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        <Navbar.Collapse\r\n                            id=\"basic-navbar-nav\"\r\n                        >\r\n                            <Nav\r\n                                defaultActiveKey=\"/admin\"\r\n                                className=\"mr-auto\" \r\n                                style={{\r\n                                    marginLeft: 'auto',\r\n                                    marginRight: 'auto',\r\n                                }}>\r\n                                {\r\n                                    sessionManager.isTutor() && (\r\n                                        <>\r\n                                            <Nav.Link className={location.pathname === 'tutor-app/upload' ? 'active-top-route' : ''} href=\"/upload\">Upload</Nav.Link>\r\n                                            <Nav.Link className={location.pathname === 'tutor-app/history' ? 'active-top-route' : ''} href=\"/history\">History</Nav.Link>\r\n                                           \r\n                                            {/* <Nav.Item className='nav-link'>\r\n                                                <NavLink activeClassName=\"active-top-route\" to=\"/upload\" >Upload</NavLink>\r\n                                            </Nav.Item >\r\n                                            <Nav.Item className='nav-link'>\r\n                                                <NavLink activeClassName=\"active-top-route\" to=\"/history\" >History</NavLink>\r\n                                            </Nav.Item> */}\r\n                                        </>\r\n                                    )\r\n                                }\r\n                                {\r\n                                    sessionManager.isAdmin() &&\r\n                                    (\r\n                                        <Nav.Item className='nav-link'>\r\n                                            <NavLink activeClassName=\"active-top-route\" to=\"/admin\" >Administration</NavLink>\r\n                                        </Nav.Item>\r\n                                    )\r\n                                }\r\n                            </Nav>\r\n                                <Navbar.Text>\r\n                                    { displayedUserDetails }\r\n                                </Navbar.Text>\r\n                            <Nav>\r\n                                {/* <Nav.Item className='nav-link'>\r\n                                    <CopyToClipboard text={sessionManager.getAuthToken()}>\r\n                                        <Button size=\"sm\" variant=\"outline-dark\" > Copy JWT <span role='img' aria-label='key emoji'>🔑</span></Button>\r\n                                    </CopyToClipboard>\r\n                                </Nav.Item> */}\r\n                                <Nav.Link href=\"tutor-app/logout\">Sign out</Nav.Link>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                    </Navbar>\r\n                    <ProtectedAppBody userData={userData} />\r\n                    <footer style={{ \r\n                        marginTop: '4em'\r\n                    }}\r\n                    className=\"ttb-container\">\r\n                        <Container>\r\n                            <Row style={{\r\n                                display: 'block'\r\n                            }}>\r\n                                Turn the Bus is a registered 501 (c) (3) US nonprofit organization.\r\n                            </Row>\r\n                        </Container>\r\n                    </footer>\r\n                </div>\r\n            </ToastProvider>\r\n        </>\r\n    );\r\n}\r\n\r\nconst ProtectedAppBody = ({ userData }) => {\r\n    return (\r\n        <main className='flex-grow-1'>\r\n            <Switch>\r\n                <Route path=\"/upload\">\r\n                    <UploadPage />\r\n                </Route>\r\n                <Route path=\"/history\">\r\n                    <HistoryPage />\r\n                </Route>\r\n            </Switch>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport const AdminRoute = ({ children, ...rest }) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={({ location }) =>\r\n                sessionManager.isAdmin() ? (\r\n                    children\r\n                ) : (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/login\",\r\n                                state: { from: location }\r\n                            }}\r\n                        />\r\n                    )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default ProtectedApp;\r\n","import { Auth } from 'aws-amplify';\r\nimport React, { useState } from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { SpinnerButton } from '../components/shared/SpinnerButton';\r\nimport { TTBLogo } from '../components/shared/TTBLogo';\r\nimport { setSessionCookie } from '../utils/sessions';\r\nimport { centerIt } from '../components/layout/Centered';\r\nimport { toUsername } from '../utils/formUtil';\r\n\r\nfunction LoginPage({ afterLogin }) {\r\n    const [email, setEmail] = useState('');\r\n    const [pass, setPass] = useState('');\r\n    const [submitting, setSubmitting] = useState(false);\r\n    const [status, setStatus] = useState({});\r\n    const history = useHistory();\r\n\r\n    const login = async (event) => {\r\n        event.preventDefault();\r\n        if (email && pass) {\r\n            try {\r\n                setSubmitting(true);\r\n                const signInResult = await Auth.signIn(toUsername(email), pass);\r\n                // const groups = signInResult?.signInUserSession?.accessToken?.payload['cognito:groups'] || [];\r\n                const token = signInResult?.signInUserSession?.idToken?.jwtToken || '';\r\n                const cookieObj = {\r\n                    email,\r\n                    name: signInResult?.attributes?.name,\r\n                    authToken: token,\r\n                    showWelcomeBanner: true\r\n                };\r\n                setSessionCookie(cookieObj);\r\n                afterLogin(cookieObj);\r\n                setSubmitting(false);\r\n                history.push('/upload');\r\n            } catch (error) {\r\n                console.error('error signing in', error);\r\n                setSubmitting(false);\r\n                if (error?.message === 'User is disabled.') {\r\n                    setStatus({\r\n                        type: 'warning',\r\n                        message: 'Your account is pending activation by administrators. 🔒'\r\n                    })\r\n\r\n                } else {\r\n                    setStatus({\r\n                        type: 'danger',\r\n                        message: `There was an error logging in.\r\n                        ${error?.message || ''}\r\n                        Please check console/network logs or contact administrators.`\r\n                    })\r\n                }\r\n            }\r\n        } else {\r\n            setStatus({\r\n                type: 'danger',\r\n                message: 'Some fields are missing'\r\n            })\r\n        }\r\n    };\r\n    return centerIt(\r\n                <>\r\n                    <TTBLogo />\r\n                    <h1>Video Upload Sign-in</h1>\r\n                    <Row className=\"h-100\">\r\n                        <Col>\r\n                            <Form>\r\n                                <Form.Group controlId=\"formBasicEmail\">\r\n                                    <Form.Label>Email address</Form.Label>\r\n                                    <Form.Control\r\n                                        disabled={submitting}\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter email\"\r\n                                        value={email}\r\n                                        onChange={e => setEmail(e.target.value)}\r\n                                        />\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId=\"formBasicPassword\">\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control\r\n                                        disabled={submitting}\r\n                                        type=\"password\"\r\n                                        placeholder=\"Password\"\r\n                                        onChange={e => setPass(e.target.value)} />\r\n                                </Form.Group>\r\n                                <SpinnerButton\r\n                                    spinning={submitting}\r\n                                    label=\"Login\"\r\n                                    variant=\"primary\"\r\n                                    type=\"submit\"\r\n                                    onClick={e => login(e)}\r\n                                />\r\n                            </Form>\r\n                        </Col>\r\n                        <Col />\r\n                    </Row>\r\n                    <br />\r\n                    {\r\n                        status?.type && status?.message &&\r\n                        <Alert\r\n                            variant={status?.type || 'warning'}\r\n                        >\r\n                            {status?.message || 'Error submitting'}\r\n                        </Alert>\r\n                    }\r\n                    <br />\r\n                    <Link to=\"/register\">Register</Link>\r\n                    <br />\r\n                    <Link to=\"/verify\">Verify email</Link>\r\n                </>\r\n    );\r\n}\r\n\r\nexport default LoginPage;\r\n","import { Auth } from 'aws-amplify';\r\nimport Cookies from \"js-cookie\";\r\nimport React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { emptySessionObj } from '../utils/sessions';\r\n\r\nconst Logout = ({ afterLogout }) => {\r\n    let history = useHistory();\r\n\r\n    useEffect(\r\n        () => {\r\n            Cookies.remove(\"tutor-session\");\r\n            Auth.signOut();\r\n            afterLogout(emptySessionObj);\r\n            history.push(\"/login\");\r\n        },\r\n        [history, afterLogout]\r\n    );\r\n\r\n    return <div>Logging out!</div>;\r\n};\r\n\r\nexport default Logout;","import { Auth } from 'aws-amplify';\r\nimport React, { useState } from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { centerIt } from '../components/layout/Centered';\r\nimport { SpinnerButton } from '../components/shared/SpinnerButton';\r\nimport { TTBLogo } from '../components/shared/TTBLogo';\r\nimport { toUsername } from '../utils/formUtil';\r\n\r\n\r\n\r\nfunction RegistrationPage({ afterRegister }) {\r\n    const [email, setEmail] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [pass, setPass] = useState('');\r\n    const [pass2, setPass2] = useState('');\r\n    const [submitting, setSubmitting] = useState(false);\r\n    const [status, setStatus] = useState({});\r\n    let history = useHistory();\r\n\r\n    let register = async (event) => {\r\n        event.preventDefault();\r\n        if (email && pass && pass2 && pass === pass2) {\r\n            try {\r\n                setSubmitting(true);\r\n                await Auth.signUp({\r\n                    username: toUsername(email),\r\n                    password: pass,\r\n                    attributes: {\r\n                        email,\r\n                        name\r\n                    }\r\n                });\r\n                setSubmitting(false);\r\n                afterRegister(email);\r\n                history.push('/verify');\r\n            } catch (error) {\r\n                setSubmitting(false);\r\n                console.error('error signing up:', error);\r\n                setStatus({\r\n                    type: 'danger',\r\n                    message: `There was an error registering.\r\n                    ${error?.message + '.' || ''}\r\n                     Please check console/network logs or contact administrators.`\r\n                })\r\n            }\r\n        } else {\r\n            setStatus({\r\n                type: 'danger',\r\n                message: 'Some fields are missing'\r\n            })\r\n        }\r\n    };\r\n    return centerIt(\r\n            <>\r\n                <TTBLogo />\r\n                <h1>Register</h1>\r\n                <Form>\r\n                    <Form.Group controlId=\"name\">\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control\r\n                            disabled={submitting}\r\n                            type=\"text\"\r\n                            placeholder=\"Enter your name\"\r\n                            value={name}\r\n                            onChange={e => setName(e.target.value)} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>Email address</Form.Label>\r\n                        <Form.Control\r\n                            disabled={submitting}\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={e => setEmail(e.target.value)} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"pass\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n                            disabled={submitting}\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            onChange={e => setPass(e.target.value)} />\r\n                        <small id=\"titleHelpBlock\" className=\"form-text text-muted\">\r\n                            Minimum length: 8<br />\r\n                        At least 1 numerical character<br />\r\n                        At least 1 special character<br />\r\n                        At least 1 uppercase character<br />\r\n                        At least 1 lowercase character<br />\r\n                        </small>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"pass2\">\r\n                        <Form.Label>Re enter password</Form.Label>\r\n                        <Form.Control\r\n                            disabled={submitting}\r\n                            type=\"password\"\r\n                            placeholder=\"Re enter Password\"\r\n                            onChange={e => setPass2(e.target.value)} />\r\n                    </Form.Group>\r\n                    <SpinnerButton\r\n                        spinning={submitting}\r\n                        label=\"Register\"\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={e => register(e)}\r\n                    />\r\n                </Form>\r\n                <br />\r\n                {\r\n                    status?.type && status?.message &&\r\n                    <Alert\r\n                        variant={status?.type || 'warning'}\r\n                    >\r\n                        {status?.message || 'Error submitting'}\r\n                    </Alert>\r\n                }\r\n                <Link to=\"/verify\">Verify email</Link>\r\n                <br />\r\n                <Link to=\"/login\">Login</Link>\r\n            </>\r\n    );\r\n}\r\n\r\nexport default RegistrationPage;\r\n","/* eslint-disable jsx-a11y/accessible-emoji */\r\nimport { Auth } from 'aws-amplify';\r\nimport React, { useState } from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Link } from 'react-router-dom';\r\nimport { TTBLogo } from '../components/shared/TTBLogo';\r\nimport { SpinnerButton } from '../components/shared/SpinnerButton';\r\nimport { centerIt } from '../components/layout/Centered';\r\nimport { toUsername } from '../utils/formUtil';\r\n\r\n\r\nfunction VerificationPage({ stickyEmail }) {\r\n    const [email, setEmail] = useState(stickyEmail || '');\r\n    const [code, setCode] = useState('');\r\n    const [submitting, setSubmitting] = useState(false);\r\n    const [status, setStatus] = useState({});\r\n\r\n    let register = async (event) => {\r\n        event.preventDefault();\r\n        if (email && code) {\r\n            try {\r\n                setSubmitting(true);\r\n                await Auth.confirmSignUp(toUsername(email), code);\r\n                setSubmitting(false);\r\n                setStatus({\r\n                    type: 'success',\r\n                    message: '✅ Your account has been verified. Please wait for admins to enable your account.'\r\n                })\r\n            } catch (error) {\r\n                console.error('error verifying:', error);\r\n                setSubmitting(false);\r\n                setStatus({\r\n                    type: 'danger',\r\n                    message: `There was an error verifying your account.\r\n                    ${error?.message || ''}\r\n                    Please check console/network logs or contact administrators.`\r\n                })\r\n            }\r\n        } else {\r\n            setStatus({\r\n                type: 'danger',\r\n                message: 'Some fields are missing'\r\n            })\r\n        }\r\n    };\r\n    return centerIt(\r\n            <>\r\n                <TTBLogo />\r\n                <h1>Email Verification</h1>\r\n                <p>\r\n                    We have sent an email with the verification code to your registered email address. 📬\r\n                </p>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>Email address</Form.Label>\r\n                        <Form.Control\r\n                            disabled={submitting}\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={e => setEmail(e.target.value)} />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"code\">\r\n                        <Form.Label>Verification Code</Form.Label>\r\n                        <Form.Control\r\n                            disabled={submitting}\r\n                            type=\"text\"\r\n                            placeholder=\"Enter the code sent to your email address\"\r\n                            value={code}\r\n                            onChange={e => setCode(e.target.value)} />\r\n                    </Form.Group>\r\n                    <SpinnerButton\r\n                        spinning={submitting}\r\n                        label=\"Verify Email\"\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={e => register(e)}\r\n                    />\r\n                </Form>\r\n                <br />\r\n                {\r\n                    status?.type && status?.message &&\r\n                    <Alert\r\n                        variant={status?.type || 'warning'}\r\n                    >\r\n                        {status?.message || 'Error submitting'}\r\n                    </Alert>\r\n                }\r\n                <br />\r\n                <Link to=\"/login\">Login</Link>\r\n                <br />\r\n                <Link to='/register'>Register</Link>\r\n            </>\r\n    );\r\n}\r\n\r\nexport default VerificationPage;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\r\nimport ProtectedApp from './routes/ProtectedApp';\r\nimport LoginPage from './routes/LoginPage';\r\nimport Logout from './routes/Logout';\r\nimport RegistrationPage from './routes/RegistrationPage';\r\nimport VerificationPage from './routes/VerificationPage';\r\nimport sessionManager from './utils/sessionManager';\r\nimport { getSessionCookie } from './utils/sessions';\r\n\r\n\r\nconst Routes = () => {\r\n    const [userData, setUserData] = useState(getSessionCookie());\r\n    const [stickyEmail, setStickyEmail] = useState();\r\n\r\n    return (\r\n        <Router basename=\"/tutor-app\">\r\n            <Switch>\r\n                <Route exact path=\"/login\" >\r\n                    <LoginPage afterLogin={setUserData} />\r\n                </Route>\r\n                <Route exact path=\"/register\" >\r\n                    <RegistrationPage afterRegister={setStickyEmail} />\r\n                </Route>\r\n                <Route exact path=\"/verify\" >\r\n                    <VerificationPage stickyEmail={stickyEmail} />\r\n                </Route>\r\n                <Route exact path=\"/logout\">\r\n                    <Logout afterLogout={setUserData} />\r\n                </Route>\r\n                <ProtectedRoute path=\"/*\">\r\n                    <ProtectedApp userData={userData} />\r\n                </ProtectedRoute>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nconst ProtectedRoute = ({ children, ...rest }) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={({ location }) =>\r\n                sessionManager.isAuthenticated() ? (\r\n                    children\r\n                ) : (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/login\",\r\n                                state: { from: location }\r\n                            }}\r\n                        />\r\n                    )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default Routes;","import Amplify, { Auth } from 'aws-amplify';\r\nimport AWS_CONFIG from './config/awsConfig';\r\nimport React from 'react';\r\nimport Routes from \"./Routes\";\r\nimport './App.css';\r\n\r\nAmplify.configure({\r\n  Auth: AWS_CONFIG.cognito,\r\n});\r\n\r\nAuth.configure();\r\n\r\nconst App = () => (\r\n  <Routes />\r\n);\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}