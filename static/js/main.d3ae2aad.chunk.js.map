{"version":3,"sources":["config/awsConfig.js","components/shared/TTBLogo.jsx","utils/sessions.js","utils/sessionManager.js","components/layout/Centered.jsx","components/shared/WelcomeBanner.jsx","components/shared/SpinnerText.jsx","utils/dataUtil.js","utils/formUtil.js","components/shared/SpinnerButton.jsx","components/app/VideoUploadForm.jsx","routes/UploadPage.jsx","routes/HistoryPage.jsx","routes/ProtectedApp.jsx","routes/LoginPage.jsx","routes/Logout.jsx","routes/RegistrationPage.jsx","routes/VerificationPage.jsx","Routes.jsx","App.js","serviceWorker.js","index.js"],"names":["AWS_CONFIG","cognito","userPoolId","userPoolWebClientId","region","api","invokeUrl","videoBucket","TTBLogo","props","src","alt","emptySessionObj","setSessionCookie","session","Cookies","expires","getSessionCookie","sessionCookie","undefined","JSON","parse","e","console","error","sessionManager","React","createContext","getSession","setSession","obj","getSessionProp","propName","defaultPropValue","isAuthenticated","Object","keys","indexOf","setSessionProp","value","email","isAdmin","isTutor","getAuthToken","getUsername","getName","centerIt","comp","Container","className","Row","Col","xs","lg","WelcomeBanner","show","useState","showBanner","setShowBanner","Jumbotron","fluid","Button","aria-label","onClick","variant","size","href","target","SpinnerText","spinning","label","Spinner","as","animation","role","aria-hidden","request","a","fetchUrlObj","method","body","tableName","Promise","resolve","reject","authToken","params","crossdomain","dataType","headers","Headers","stringify","searchParams","append","fetch","then","response","json","getCloudData","pre","query","validator","victory","defeat","getDataUrlObj","URL","forEach","queryKey","result","reason","getResponse","resource","dataValues","url","objectKey","contentType","toUsername","replace","toUniqueArray","objArr","key","arrayOfKeys","controlSwitch","controlType","controlProps","required","selectFrom","Form","Control","arr","withEmpty","optionsComp","push","toOptions","File","FormikControl","horizontal","displayName","id","helpText","learnMore","errors","touched","formGroupProps","Group","controlId","Label","name","Feedback","type","Text","muted","FormikSelect","FormikFile","renderFields","fields","handleChange","values","other","length","map","fieldData","index","formikValues","fieldName","formFieldId","onChange","split","renderSelect","validationProps","renderFile","renderControl","formatTime","seconds","mill","hoursRemaining","Math","floor","minutesRemaining","secondsRemaining","timeAr","join","formatBytes","b","c","d","log","parseFloat","pow","toFixed","SpinnerButton","disabled","uploadFormSchema","Yup","shape","tutorName","chapterName","chapterNumber","chapterPart","title","file","VideoUploadForm","formData","bookData","videoData","Items","displayedBooks","setDisplayedBooks","selectedSubject","setSelectedSubject","selectedLanguage","setSelectedLanguage","validated","setValidated","progress","setProgress","uploadedBytes","setUploadedBytes","totalBytes","setTotalBytes","setError","warning","setWarning","showSuccessMsg","setShowSuccessMsg","ultimateFormData","setUltimateFormData","showUploadProgress","setShowUploadProgress","submittingForm","setSubmittingForm","uploadXhr","setUploadXhr","timeStarted","setTimeStarted","formRef","useRef","classInfoFields","filter","dataItems","section","tutorInfoFields","sort","order","bookInfoFields","videoInfoFields","getFiltered","filterKey","filterValue","items","eachItem","getSubjectFilteredBooks","subject","getSubjectORLanguageFilteredBooks","language","filteredBooks","getSubjectLanguageFilteredBooks","firstUnique","useEffect","displayedLanguages","bookNames","initFormValues","bookLanguage","bookName","formReset","current","reset","sendFile","formValues","signedURL","get","xhr","XMLHttpRequest","upload","addEventListener","lengthComputable","percentage","round","loaded","total","open","overrideMimeType","onreadystatechange","readyState","DONE","status","HEADERS_RECEIVED","updateVideoMetaData","send","Date","timeElapsed","uploadSpeed","eta","getNewProgress","Modal","aria-labelledby","centered","Header","Title","Body","class","style","width","aria-valuenow","aria-valuemin","aria-valuemax","Footer","event","abort","initialValues","onSubmit","setSubmitting","isValid","uploadFileField","document","querySelector","uploadFile","files","data","FormData","validationSchema","handleReset","handleSubmit","noValidate","ref","newSubject","ButtonToolbar","ButtonGroup","Alert","UploadPage","formLoading","setFormLoading","showForm","setShowForm","showFormError","setShowFormError","videoMetaData","setVideoMetaData","booksMetaData","setBooksMetaData","Count","videoMetadata","textStatus","jqXHR","sm","md","closeLabel","dismissible","onClose","to","HistoryPage","historyDataValue","setHistoryData","UploadVideo","options","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","showTotal","alwaysShowAllBtns","sizePerPageList","text","onPageChange","page","sizePerPage","onSizePerPageChange","striped","keyField","columns","dataField","defaultSorted","pagination","paginationFactory","ProtectedAppBody","userData","path","ProtectedApp","location","useLocation","displayedUserDetails","placement","Navbar","bg","expand","sticky","Brand","Toggle","aria-controls","Collapse","Nav","defaultActiveKey","marginLeft","marginRight","Link","pathname","Item","activeClassName","marginTop","display","LoginPage","afterLogin","setEmail","pass","setPass","submitting","setStatus","history","useHistory","login","preventDefault","Auth","signIn","signInResult","token","signInUserSession","idToken","jwtToken","cookieObj","attributes","showWelcomeBanner","message","placeholder","Logout","afterLogout","remove","signOut","RegistrationPage","afterRegister","setName","pass2","setPass2","register","signUp","username","password","VerificationPage","stickyEmail","code","setCode","confirmSignUp","ProtectedRoute","children","rest","render","state","from","Routes","setUserData","setStickyEmail","basename","exact","Amplify","configure","App","Boolean","window","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d3ae2aad.chunk.js","sourcesContent":["const AWS_CONFIG = {\n    cognito: {\n        userPoolId: 'ap-south-1_goMJyvOwY',\n        userPoolWebClientId: '6pvgee8erngn4d70buf5ulnefs',\n        region: 'ap-south-1'\n    },\n    api: {\n        invokeUrl: 'https://1bb73f90n5.execute-api.ap-south-1.amazonaws.com/test'\n    },\n    videoBucket: 'test-turnthebus-upload',\n};\n\nexport default AWS_CONFIG;","import React from \"react\";\n\nexport const TTBLogo = (props) => {\n    return (\n        <>\n            <img src=\"https://turnthebus.org/images/turn-the-bus-logo.png\" alt=\"Seattle Public Library Logo\" />\n        </>\n    );\n}","import React from \"react\";\nimport * as Cookies from \"js-cookie\";\nexport const emptySessionObj = {};\nexport const setSessionCookie = (session) => {\n    Cookies.remove(\"user-session\");\n    Cookies.set(\"user-session\", session, { expires: 14 });\n};\n\nexport const getSessionCookie = () => {\n    const sessionCookie = Cookies.get(\"user-session\");\n    if (sessionCookie === undefined) {\n        return emptySessionObj;\n    } else {\n        try {\n            const sessionObject = JSON.parse(sessionCookie);\n            return sessionObject;\n        } catch (e) {\n            console.error('Corrupted session cookie');\n            Cookies.remove(\"user-session\");\n            return emptySessionObj;\n        }\n    }\n};\n\nexport const SessionContext = React.createContext(getSessionCookie());\n","import { getSessionCookie, setSessionCookie } from './sessions';\nconst sessionManager = {\n    getSession: () => getSessionCookie('tutor-session'),\n    setSession: (obj) => setSessionCookie(obj),\n    getSessionProp: (propName, defaultPropValue = false) => sessionManager.isAuthenticated()\n        ? (\n            Object.keys(sessionManager.getSession()).indexOf(propName) != -1\n                ? sessionManager.getSession()[propName]\n                : defaultPropValue\n            )\n        : defaultPropValue,\n    setSessionProp: (propName, value) => {\n        sessionManager.isAuthenticated() && sessionManager.setSession({\n            ...sessionManager.getSession(),\n            [propName]: value\n        })\n    },\n    isAuthenticated: () => sessionManager.getSession()?.email || false,\n    isAdmin: () => sessionManager.getSessionProp('isAdmin'),\n    isTutor: () => sessionManager.getSessionProp('isTutor', true),\n    getAuthToken: () => sessionManager.getSessionProp('authToken'),\n    getUsername: () => sessionManager.getSessionProp('email'),\n    getName:  () => sessionManager.getSessionProp('name'),\n};\n\nexport default sessionManager;","import React from 'react';\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nexport const centerIt = (comp) => {\n    return (\n        <Container className=\"h-100\">\n            <Row className=\"h-100\">\n                <Col />\n                <Col xs={12} lg={6} className=\"align-self-center\">\n                {comp}\n                </Col>\n                <Col />\n            </Row>\n        </Container>\n    );\n}\nexport const centeredComp = (WrappedComponent) => {\n    return class extends React.Component {\n\n        render() {\n            return centerIt(<WrappedComponent {...this.props} />);\n        }\n    };\n}\n\n\n","import Button from 'react-bootstrap/Button'\nimport { centerIt } from '../layout/Centered';\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport React, { useState } from 'react';\nimport sessionManager from '../../utils/sessionManager';\n\nconst BANNER_PROP_NAME = 'show-welcome-banner';\n\nconst WelcomeBanner = () => {\n    const show = sessionManager.getSessionProp(BANNER_PROP_NAME, true);\n    const [showBanner, setShowBanner] = useState(show);\n    return ( showBanner && (\n        <Jumbotron fluid className=\"welcome-banner\">\n            <Button\n                aria-label=\"dismiss banner\"\n                className=\"close-btn\"\n                onClick={() => {\n                    sessionManager.setSessionProp(BANNER_PROP_NAME, false);\n                    setShowBanner(false);\n                }}\n                variant=\"outline-dark\"\n                size=\"sm\">\n                    Dismiss\n            </Button> \n            {centerIt(\n                <>\n                    <h1 className=\"display-4\">स्वागत है</h1>\n                    <p className=\"lead\">नमस्ते दोस्तों। टर्न द बस के साथ ऑनलाइन पढ़ाने के लिए धन्यवाद! कृपया इस फॉर्म का उपयोग अपने वीडियो का विवरण प्रस्तुत करने के लिए करें।</p>\n                    <p className=\"lead\">Namaste, friends. Thank you for teaching online with Turn the Bus! Please use this form to submit the details of your video.</p>\n                    <p className=\"lead\">\n                        <Button variant=\"link\" href=\"https://www.turnthebus.org/\" target=\"_blank\">🌐 turnthebus.org</Button>\n                    </p>\n                </>\n            )}\n        </Jumbotron>\n    )\n    )\n};\n\n\nexport default WelcomeBanner;\n","import React from 'react';\nimport Spinner from \"react-bootstrap/Spinner\";\n\nconst SpinnerText = ({spinning, label}) => {\n    return (spinning &&\n        (<>\n            {label}{` `}\n            <Spinner\n                as=\"span\"\n                animation=\"border\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n            />\n        </>)\n    );\n}\n\nexport default SpinnerText;","import AWS_CONFIG from \"../config/awsConfig\";\nimport sessionManager from \"./sessionManager\";\n\nconst NO_AUTH_MSG = 'No auth token';\n\nexport const request = async ({fetchUrlObj, method = 'GET', body, tableName = ''}) => {\n    return new Promise((resolve, reject) => {\n        const authToken = sessionManager.getAuthToken();\n        const userName = sessionManager.getUsername();\n        if (!authToken) {\n            console.error(NO_AUTH_MSG);\n            reject({});\n        }\n\n        if (!fetchUrlObj) {\n            console.error('No or invalid url');\n            reject({});\n        }\n        try {\n            const params = {\n                'Content-Type': 'application/json',\n                crossdomain: true,\n                dataType: 'json',\n                headers: new Headers({\n                    'Authorization': authToken\n                }),\n        };\n            if (method !== 'GET') {\n                params.method = 'POST';\n                params.body = JSON.stringify(body)\n            } else {\n                tableName && fetchUrlObj.searchParams.append('tableName', tableName);\n            }\n            resolve(fetch(fetchUrlObj, params).then(response => response.json()));\n        }\n        catch (e) {\n            console.error('error fetching response', e);\n            reject({});\n        }\n    });\n}\n\nexport const setCouldData = ({\n    pre,\n    name,\n    query,\n    validator,\n    victory,\n    defeat,\n    body\n}) => {\n    pre();\n    const setDataUrl = new URL(\"https://indmrclke8.execute-api.us-west-2.amazonaws.com/dev/add\");\n    setDataUrl.searchParams.append('objectName', name);\n    if (query) {\n        Object.keys(query).forEach(queryKey => {\n            setDataUrl.searchParams.append(queryKey, query[queryKey]);\n        })\n    }\n    request({\n        fetchUrlObj: setDataUrl,\n        method: 'POST',\n        body\n    }).then((response) => {\n        if (validator(response)) {\n            victory(response?.data)\n        } else {\n            defeat()\n        }\n    }, (reason) => {\n        defeat(reason)\n    });\n}\n\nexport const getCloudData = ({\n    pre = () => {},\n    tableName,\n    query,\n    validator,\n    victory,\n    defeat\n}) => {\n    pre();\n    const getDataUrlObj = new URL(`${AWS_CONFIG.api.invokeUrl}/scantable`);\n    if (query) {\n        Object.keys(query).forEach(queryKey => {\n            getDataUrlObj.searchParams.append(queryKey, query[queryKey]);\n        })\n    }\n    request({\n        fetchUrlObj: getDataUrlObj,\n        tableName\n    }).then((response) => {\n        if (validator(response)) {\n            victory(response?.result)\n        } else {\n            defeat()\n        }\n    }, (reason) => {\n        defeat(reason)\n    });\n}\n\nexport const getResponse = ({\n    pre = () => {},\n    resource = 'getsignedurl',\n    dataValues,\n    validator,\n    victory,\n    defeat,\n}) => {\n    try{\n        pre();\n        const authToken = sessionManager.getAuthToken();\n        if (!authToken) {\n            console.error(NO_AUTH_MSG);\n            defeat(NO_AUTH_MSG);\n        }\n        const url = new URL(`${AWS_CONFIG.api.invokeUrl}/${resource}`);\n        url.searchParams.append('bucket', AWS_CONFIG.videoBucket);\n        Object.keys(dataValues).forEach((objectKey) => {\n            url.searchParams.append(objectKey, dataValues[objectKey]);\n        });\n        fetch(\n            url,\n            {\n                crossdomain: true,\n                contentType: 'application/json',\n                dataType: 'json',\n                headers: new Headers({\n                    'Authorization': authToken\n                }),\n            }\n        )\n        .then(response => response.json())\n        .then(\n            (response) => {\n                if(validator(response)){\n                    victory(response);\n                } else {\n                    defeat(response);\n                }\n            }\n        )\n    } catch (e) {\n        console.error('Error getting video upload URL!');\n        defeat(e);\n    }\n}\n","import { Col, Form } from 'react-bootstrap';\nimport React from 'react';\nimport { cosh } from 'core-js/fn/number';\n\nexport const toUsername = (email) => {\n    return email.replace('@', '-at-');\n}\n\nexport const renderOptions = (objs, value, display) => {\n    const optionsComp = [\n        <option key='empty-option' value=''>Please select</option>\n    ];\n    objs.forEach(obj => {\n        optionsComp.push(<option key={obj[value]} value={obj[value]}>{obj[display]}</option>)\n    }\n    );\n    return (<>\n        {optionsComp}\n    </>);\n}\n\nexport const toUniqueArray = (objArr, key) => {\n    let arrayOfKeys = [];\n    let t = objArr?.forEach(obj => {\n        arrayOfKeys[obj[key]] = '';\n    })\n    return Object.keys(arrayOfKeys);\n}\n\nexport const toOptions = (arr, withEmpty = false) => {\n    const optionsComp = withEmpty ? [\n        <option key='empty-option' value=''>Please select</option>\n    ] : [];\n\n    arr.forEach(obj => {\n        optionsComp.push(<option key={obj} value={obj}>{obj}</option>)\n    }\n    );\n    return (<>\n        {optionsComp}\n    </>);\n}\n\nexport const controlSwitch = ({\n    controlType,\n    controlProps,\n    required,\n    selectFrom,\n}) => {\n    switch(controlType) {\n        case 'select':\n            return (<Form.Control\n                {...controlProps}\n                as={controlType}\n                required={required}\n            >\n                    {selectFrom && toOptions(selectFrom)}\n            </Form.Control>)\n        case 'file':\n            return (\n                <Form.File \n                    {...controlProps}\n                    // custom\n                    required={required}\n                />\n            )\n        default:\n            return (<Form.Control\n                {...controlProps}\n                as={controlType}\n                required={required}\n            />);\n    }\n}\n\nexport const FormikControl = ({\n    horizontal,\n    displayName,\n    required,\n    id,\n    controlType,\n    selectFrom,\n    helpText,\n    learnMore,\n    touched,\n    errors,\n    ...controlProps\n}) => {\n    const formGroupProps = {};\n    if(horizontal) {\n        formGroupProps['as'] = Col;\n    }\n    // console.debug(controlProps ? controlProps.name : 'non', errors);\n    return (\n        <Form.Group controlId={id} {...formGroupProps}>\n                <Form.Label>{displayName}</Form.Label>\n                {required && <span className=\"red\">*</span>}\n                { controlSwitch({\n                    controlType,\n                    controlProps,\n                    required,\n                    selectFrom,\n                })}\n                {\n                    errors &&\n                    errors[controlProps.name] \n                    ? (\n                        <Form.Control.Feedback type=\"invalid\">\n                            {errors[controlProps.name]}\n                        </Form.Control.Feedback>\n                    ) : ''\n                }\n                <Form.Text muted>\n                    {typeof helpText === 'function' ? helpText() : (helpText || '')}\n                    {learnMore ? (\n                        <>\n                            {` `}<a target=\"_blank\" href={learnMore}>Learn more</a>\n                        </>\n                    ): ''}\n                </Form.Text>\n        </Form.Group>\n    );\n}\n\nexport const FormikSelect = (props) => {\n    return (\n        <FormikControl {...props} controlType=\"select\" />\n    )\n}\n\nexport const FormikFile = (props) => {\n    return (\n        <FormikControl {...props} controlType=\"file\" />\n    )\n}\n\nexport const renderControl = (fieldData, index, values, handleChange, validationProps) => {\n    const {\n        type,\n        fieldName,\n        formFieldId,\n        ...other\n    } = fieldData;\n    return (\n        fieldName\n        && formFieldId\n        && type\n        ? (<FormikControl\n            {...validationProps}\n            {...other}\n            key={`${formFieldId}-${index}`}\n            controlType={type}\n            displayName={fieldName}\n            id={formFieldId}\n            name={formFieldId}\n            value={values[formFieldId]}\n            onChange={handleChange}\n        />) : 'Error rendering field');\n}\n\nexport const renderSelect = (fieldData, index, formikValues, handleChange, horizontal) => {\n    const {\n        fieldName,\n        formFieldId,\n        values,\n        ...other\n    } = fieldData;\n    return (\n        fieldName\n        && formFieldId\n        && values\n        ? (<FormikSelect\n            {...other}\n            key={`${formFieldId}-${index}`}\n            displayName={fieldName}\n            id={formFieldId}\n            name={formFieldId}\n            value={formikValues[formFieldId]}\n            onChange={handleChange}\n            selectFrom={values?.split(',')}\n        />) : 'Error rendering select field.');\n}\n\nexport const renderFile = (fieldData, index, formikValues, handleChange, validationProps) => {\n    const {\n        fieldName,\n        formFieldId,\n        ...other\n    } = fieldData;\n    // console.debug('renderFile', fieldName, validationProps);\n    return (\n        fieldName\n        && formFieldId\n        ? (<FormikFile\n            {...validationProps}\n            {...other}\n            key={`${formFieldId}-${index}`}\n            displayName={fieldName}\n            id={formFieldId}\n            name={formFieldId}\n            value={formikValues[formFieldId]}\n            onChange={handleChange}\n        />) \n        : 'Error rendering file field'\n    )\n}\n\nexport const renderFields = ({\n    fields,\n    handleChange,\n    horizontal = false,\n    values,\n    ...other\n}) => {\n    if(fields?.length) {\n        return fields.map((fieldData, index) => {\n            switch(fieldData?.type) {\n                case 'select': {\n                    return renderSelect({\n                        horizontal,\n                        ...fieldData\n                    }, index, values, handleChange)\n                }\n                case 'file': {\n                    return renderFile({\n                        horizontal,\n                        ...fieldData\n                    }, index, values, handleChange, other)\n                }\n                default:\n                    return renderControl({\n                        horizontal,\n                        ...fieldData,\n                    }, index, values, handleChange, other)\n            }\n        });\n    }\n    return 'No Fields to render.'\n}\n\nexport const formatTime = (seconds) => {\n    let mill = seconds * 1000;\n    let hoursRemaining = (Math.floor(mill / 1000 / 60 / 60)) % 24;\n    let minutesRemaining = (Math.floor(mill / 1000 / 60)) % 60;\n    let secondsRemaining = (Math.floor(mill / 1000)) % 60;\n    let timeAr = []\n    if (hoursRemaining > 0) {\n        timeAr.push(`${hoursRemaining} hours`);\n    }\n    if (minutesRemaining > 0) {\n        timeAr.push(`${minutesRemaining} minutes`);\n    }\n    if (secondsRemaining > 0) {\n        timeAr.push(`${secondsRemaining} seconds`);\n    }\n    return timeAr.length ? timeAr.join(', ') + ' remaining' : '';\n}\n\nexport const formatBytes = (a, b = 2) => {\n    if (0 === a) return \"0 Bytes\";\n    const c = 0 > b ? 0 : b, d = Math.floor(Math.log(a) / Math.log(1024));\n    return parseFloat((a / Math.pow(1024, d)).toFixed(c)) + \" \" + [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"][d];\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport SpinnerText from './SpinnerText';\n\nexport const SpinnerButton = ({ spinning, label, ...other }) => {\n    return (\n        <>\n            <Button\n                disabled={spinning}\n                {...other}\n            >\n                { spinning ? (<SpinnerText spinning={spinning} label={label} />) : label}\n            </Button>\n        </>\n    );\n}\n","import { Formik } from 'formik';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Alert, Button, ButtonGroup, ButtonToolbar, Form, Modal } from 'react-bootstrap';\nimport * as Yup from 'yup';\nimport { getResponse } from '../../utils/dataUtil';\nimport { formatBytes, formatTime, FormikSelect, renderFields, toUniqueArray } from '../../utils/formUtil';\nimport { SpinnerButton } from '../shared/SpinnerButton';\n\nconst uploadFormSchema = Yup.object().shape({\n    tutorName: Yup.string()\n      .required('Please provide a tutor name.'),\n    chapterName: Yup.string()\n      .required('Please provide a chapter name.'),\n    chapterNumber: Yup.string()\n      .required('Please provide a chapter number.'),\n    chapterPart: Yup.string()\n        .required('Please provide a chapter part.'),\n    title: Yup.string()\n      .required('Please provide a video title.'),\n    file: Yup.mixed()\n        .required('Please provide an mp4 file.')\n  });\n\nconst VideoUploadForm = ({formData}) => {\n    const {bookData, videoData} = formData;\n    const [displayedBooks, setDisplayedBooks] = useState(bookData?.Items);\n    const [selectedSubject, setSelectedSubject] = useState('English');\n    const [selectedLanguage, setSelectedLanguage] = useState('English');\n    const [validated, setValidated] = useState(false);\n    const [progress, setProgress] = useState(0);\n    const [uploadedBytes, setUploadedBytes] = useState(0);\n    const [totalBytes, setTotalBytes] = useState(0);\n    const [error, setError] = useState();\n    const [warning, setWarning] = useState();\n    const [showSuccessMsg, setShowSuccessMsg] = useState(false);\n    const [ultimateFormData, setUltimateFormData] = useState();\n    const [showUploadProgress, setShowUploadProgress] = useState(false);\n    const [submittingForm, setSubmittingForm] = useState(false);\n    const [uploadXhr, setUploadXhr] = useState(false);\n    const [timeStarted, setTimeStarted] = useState(false);\n    const formRef = useRef();\n\n    const classInfoFields = videoData?.Items?.filter(dataItems => dataItems.section === 'CLASS_INFO') || [];\n    const tutorInfoFields = videoData?.Items?.filter(dataItems => dataItems.section === 'TUTOR_INFO').sort((a, b) => a.order - b.order) || [];\n    const bookInfoFields = videoData?.Items?.filter(dataItems => dataItems.section === 'BOOK_INFO').sort((a, b) => a.order - b.order) || [];\n    const videoInfoFields = videoData?.Items?.filter(dataItems => dataItems.section === 'VIDEO_INFO').sort((a, b) => a.order - b.order) || [];\n\n    const getFiltered = (filterKey, filterValue, items) => {\n        if(items && filterValue) {\n            return items?.filter((eachItem) => eachItem[filterKey] === filterValue);\n        }\n        return items || [];\n    }\n\n    const getSubjectFilteredBooks = (subject) => {\n        return getFiltered('SUBJECT', subject, bookData?.Items);\n    }\n\n    const getSubjectLanguageFilteredBooks = (subject, language) => {\n        return getFiltered('LANGUAGE', language, getSubjectFilteredBooks(subject));\n    }\n\n    const getSubjectORLanguageFilteredBooks = (subject, language) => {\n        const filteredBooks = getSubjectLanguageFilteredBooks(subject, language);\n        return filteredBooks?.length ? filteredBooks : getSubjectFilteredBooks(subject);\n    }\n\n    const firstUnique = (items, key) => toUniqueArray(items, key)[0];\n\n    useEffect(() => {\n        setDisplayedBooks(getSubjectORLanguageFilteredBooks(selectedSubject, selectedLanguage));\n    }, [selectedSubject, selectedLanguage]);\n\n\n\n    const displayedLanguages = toUniqueArray(getSubjectFilteredBooks(selectedSubject), 'LANGUAGE');\n\n    const bookNames = toUniqueArray(displayedBooks, 'BOOK_NAME');\n\n    const initFormValues = {\n        tutorName: '',\n        subject: selectedSubject,\n        bookLanguage: displayedLanguages[0],\n        bookName: bookNames[0]\n    };\n\n    const formReset = () => {\n        if (formRef && formRef.current) {\n            formRef.current.reset();\n        }\n    }\n\n    const updateVideoMetaData = (formValues) => {\n        if (formValues) {\n            // const dataValues = {};\n            // formData.forEach(function(value, key){\n            //     dataValues[key] = value;\n            // });\n            // console.debug('dataValues', dataValues);\n            getResponse({\n                pre: () => {},\n                resource: 'updatevideometadata',\n                dataValues: formValues,\n                validator: () => true,\n                victory: () => {\n                    setShowUploadProgress(false);\n                    setShowSuccessMsg(true);\n                    setValidated(false);\n                    formReset();\n                },\n                defeat: (response) => {\n                    setError('POST: Could not update video data. Please check console/network logs.');\n                },\n            })\n        } else {\n            setError('Sever Error: Unknown uploaded filename. Please check console/network logs.')\n        }\n    }\n\n    const cancelUploadHandler = event => {\n        if (uploadXhr) {\n            uploadXhr.abort();\n            setWarning('Upload canceled!');\n        }\n        setShowUploadProgress(false);\n    }\n\n    const getNewProgress = () => {\n        let timeElapsed = (new Date()) - timeStarted;\n        let uploadSpeed = uploadedBytes / (timeElapsed / 1000);\n        const newEstimatedTime = (totalBytes - uploadedBytes) / uploadSpeed;\n\n        return {\n            eta: formatTime(newEstimatedTime),\n            uploadSpeed: Math.round(uploadSpeed / 1000),\n        };\n    };\n\n    const sendFile = (formData, formValues, signedURL) => {\n    if (signedURL && formData.get('file') && formData.get('file').name) {\n        setShowUploadProgress(true);\n        const xhr = new XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function (e) {\n            if (e.lengthComputable) {\n                const percentage = Math.round((e.loaded * 100) / e.total);\n                setTotalBytes(e.total);\n                setUploadedBytes(e.loaded);\n                setProgress(percentage);\n            }\n        }, false);\n\n        xhr.open('POST', signedURL.url);\n        xhr.overrideMimeType('text/plain; charset=x-user-defined-binary');\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === XMLHttpRequest.DONE && (xhr.status === 200 || xhr.status === 204)) {\n                updateVideoMetaData(formValues);\n            }\n            else if (xhr.readyState !== XMLHttpRequest.HEADERS_RECEIVED) {\n                console.error('POST: Server response error. Please check console/network logs.')\n            }\n        };\n        xhr.send(formData);\n        setUploadXhr(xhr);\n        setTimeStarted(new Date());\n    } else {\n        !signedURL && setError('Server Error!');\n    }\n}\n\nconst {\n    eta,\n    uploadSpeed,\n} = getNewProgress();\n\n    return (\n    <div>\n        <Modal\n            show={showUploadProgress}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            <Modal.Header>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Uploading ({uploadSpeed} KB/s)\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div>\n                    <span id=\"uploadDataDone\"></span>\n                        <span id=\"uploadDataTotal\">\n                            {formatBytes(uploadedBytes)} / {formatBytes(totalBytes)}\n                        </span>\n                        <br />\n                        <small>\n                            {eta} \n                        </small>\n                        <div id=\"uploadProgressBarCtr\" class=\"progress\">\n                            <span id=\"uploadProgressValue\">{`${progress}%`}</span>\n                            <div\n                                id=\"uploadProgressBar\"\n                                class=\"progress-bar\"\n                                style={{\n                                    width: `${progress}%`,\n                                }}\n                                role=\"progressbar\"\n                                aria-valuenow={progress}\n                                aria-valuemin=\"0\"\n                                aria-valuemax=\"100\"\n                            >&nbsp;</div>\n                        </div>\n                    <small>{ultimateFormData?.key || 'No File'}</small>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button\n                    onClick={cancelUploadHandler}\n                >\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n        <h1>Video Upload</h1><br />\n        <p>Fields marked with a red asterisk (<span className=\"red\">*</span>) are required fields. Please provide a valid value for these.</p>\n        <p>तारांकन चिह्न (<span className=\"red\">*</span>) के साथ चिह्नित प्रश्न अनिवार्य हैं।</p>\n        <Formik\n            initialValues={initFormValues}\n            onSubmit={(values, { setSubmitting }) => {\n                setSubmittingForm(true);\n                uploadFormSchema\n                    .isValid(values)\n                    .then(\n                        (isValid) => {\n                            if(isValid){\n                                const uploadFileField = document.querySelector('#file');\n                                const uploadFile = uploadFileField && uploadFileField.files && uploadFileField.files[0];\n                                const key = uploadFile && uploadFile.name;\n                                if(key){\n                                    const {\n                                        file,\n                                        ...formValues\n                                    } = values;\n                                    const dataValues = {\n                                        key,\n                                        ...formValues\n                                    }\n                                    setUltimateFormData(dataValues);\n                                    getResponse({\n                                        dataValues,\n                                        validator: () => true,\n                                        victory: (data) => {\n                                            let signedURL = data.signedURL;\n                                            let formData = new FormData();\n                                            // console.debug('signedURL.fields', signedURL.fields);\n                                            Object.keys(signedURL.fields).forEach(key => {\n                                                formData.append(key, signedURL.fields[key]);\n                                            });\n                                            formData.append('file', uploadFile);\n                                            setSubmittingForm(false);\n                                            sendFile(formData, dataValues, signedURL);\n                                        },\n                                        defeat: (error) => {\n                                            console.error(error);\n                                            setError('Failed to upload!');\n                                        },\n                                    })\n                                } else {\n                                    setError('No file!');\n                                }\n                            }\n                        },\n                        (reason) => {\n                            console.error(reason);\n                            setError('Failed to upload!');\n                        },\n                    );\n                setSubmitting(false);\n            }}\n            validationSchema={uploadFormSchema}\n        >\n            {({\n                errors,\n                handleChange,\n                handleReset,\n                handleSubmit,\n                touched,\n                values,\n             }) => {\n                 return (\n                    <Form\n                        validated={validated}\n                        noValidate\n                        ref={formRef}\n                    >\n                        <h2>Tutor Information</h2>\n                        {\n                            renderFields({\n                                errors,\n                                fields: tutorInfoFields,\n                                handleChange,\n                                touched,\n                                values,\n                            })\n                        }\n                        <h2>Class Information</h2>\n                        <Form.Row>\n                        {\n                            renderFields({\n                                errors,\n                                fields: classInfoFields,\n                                handleChange,\n                                horizontal: true,\n                                touched,\n                                values,\n                            })\n                        }\n                        </Form.Row>\n                        <h2>Book Information</h2>\n                        <Form.Row>\n                            <FormikSelect\n                                horizontal\n                                displayName=\"Subject\"\n                                required\n                                id=\"subject\"\n                                name=\"subject\"\n                                value={values.subject}\n                                onChange={(event) => {\n                                    const newSubject = event?.target?.value;\n                                    values.bookLanguage = firstUnique(getSubjectFilteredBooks(newSubject), 'LANGUAGE');\n                                    values.bookName = firstUnique(getSubjectORLanguageFilteredBooks(newSubject, values.bookLanguage), 'BOOK_NAME');\n                                    setSelectedSubject(newSubject);\n                                    setSelectedLanguage(values.bookLanguage);\n                                    handleChange(event);\n                                }}\n                                selectFrom={toUniqueArray(bookData?.Items, 'SUBJECT')}\n                            />\n                            <FormikSelect\n                                horizontal\n                                displayName=\"Book Language\"\n                                required\n                                id=\"bookLanguage\"\n                                name=\"bookLanguage\"\n                                value={values.bookLanguage}\n                                onChange={(event) => {\n                                    values.bookName = firstUnique(getSubjectORLanguageFilteredBooks(values.subject, event?.target?.value), 'BOOK_NAME');\n                                    setSelectedLanguage(event?.target?.value);\n                                    handleChange(event);\n                                }}\n                                selectFrom={displayedLanguages}\n                            />\n                        </Form.Row>\n                        <FormikSelect \n                            displayName=\"Book Name\"\n                            required\n                            id=\"bookName\"\n                            name=\"bookName\"\n                            value={values.bookName}\n                            onChange={handleChange}\n                            selectFrom={bookNames}\n                        />\n                        {\n                            renderFields({\n                                errors,\n                                fields: bookInfoFields,\n                                handleChange,\n                                values,\n                            })\n                        }\n                        <h2>Video Details</h2>\n                        {\n                            renderFields({\n                                errors,\n                                fields: videoInfoFields,\n                                handleChange,\n                                values,\n                            })\n                        }\n                        <ButtonToolbar aria-label=\"Toolbar with button groups\">\n                            <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\n                                <SpinnerButton\n                                    type=\"button\"\n                                    onClick={(event) => {\n                                        setValidated(true);\n                                        handleSubmit(event);\n                                    }}\n                                    spinning={submittingForm}\n                                    label='Upload' />\n                            </ButtonGroup>\n                            <ButtonGroup className=\"mr-2\" aria-label=\"Second group\">\n                                <Button\n                                    type=\"button\"\n                                    variant=\"outline-secondary\"\n                                    onClick={(event) => {\n                                        setValidated(false);\n                                        formReset();\n                                        setShowSuccessMsg(false);\n                                        handleReset(event);\n                                    }}>\n                                        clear all\n                                </Button>\n                            </ButtonGroup>\n                        </ButtonToolbar>\n                            {showSuccessMsg &&\n                                <Alert variant=\"success\">\n                                    File uploaded successfully!\n                                </Alert>\n                            }\n                            {warning &&\n                                <Alert variant=\"warning\">\n                                    {warning}\n                                </Alert>\n                            }\n                            {error &&\n                                <Alert variant=\"danger\">\n                                    {error}\n                                </Alert>\n                            }\n                    </Form>\n                );\n             }}\n        </Formik>\n    </div>\n)};\n\nexport default VideoUploadForm;\n","import Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container'\nimport React, { useEffect, useState } from 'react';\nimport WelcomeBanner from '../components/shared/WelcomeBanner';\nimport SpinnerText from '../components/shared/SpinnerText';\nimport { getCloudData } from '../utils/dataUtil';\nimport { Alert } from 'react-bootstrap';\nimport VideoUploadForm from '../components/app/VideoUploadForm';\nimport { Link } from 'react-router-dom';\n\nconst UploadPage = () => {\n    const [formLoading, setFormLoading] = useState(true);\n    const [showForm, setShowForm] = useState(false);\n    const [showFormError, setShowFormError] = useState(false);\n    const [videoMetaData, setVideoMetaData] = useState({});\n    const [booksMetaData, setBooksMetaData] = useState({});\n\n    useEffect(() => {\n        getCloudData({\n            pre: () => setFormLoading(true),\n            tableName: 'videoMetadata',\n            validator: (response) => response?.result?.Count >= 0,\n            victory: (videoMetadata, textStatus, jqXHR) => {\n                setVideoMetaData(videoMetadata);\n                getCloudData({\n                    tableName: 'booksMetaData',\n                    validator: (response) => response?.result?.Count >= 0,\n                    victory: (booksMetaData, textStatus, jqXHR) => {\n                        setFormLoading(false);\n                        setBooksMetaData(booksMetaData);\n                        setShowForm(true);\n                    },\n                    defeat: () => {\n                        setFormLoading(false);\n                        setShowFormError(true);\n                    }\n                });\n            },\n            defeat: () => {\n                setFormLoading(false);\n                setShowFormError(true);\n            }\n        });\n    }, []\n    );\n\n    return (\n        <>\n            <WelcomeBanner/>\n            {\n                <Container className=\"upload-main-content\">\n                    <Row>\n                        <Col />\n                        <Col sm={12} md={8} >\n                            <SpinnerText spinning={formLoading} label=\" loading video upload form\" />\n                            {!formLoading && !showFormError && showForm && (\n                                <VideoUploadForm formData={{\n                                    bookData: booksMetaData,\n                                    videoData: videoMetaData\n                                }} />\n                            )}\n                            <Alert\n                                closeLabel=\"dismiss alert\"\n                                dismissible\n                                show={showFormError}\n                                onClose={() => setShowFormError(false)}\n                                variant='danger'\n                            >\n                                Encountered some error getting form data. <Link to='/login'>Try signing in again.</Link> \n                            </Alert>\n                        </Col>\n                        <Col />\n                    </Row>\n                </Container>\n            }\n        </>\n    );\n};\n\nexport default UploadPage;\n","import { getCloudData } from '../utils/dataUtil';\nimport * as ReactBootstrap from \"react-bootstrap\";\nimport React, { useEffect, useState } from 'react';\nimport SpinnerText from '../components/shared/SpinnerText';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport { render } from '@testing-library/react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\n\nconst HistoryPage = () =>\n{\n     \n  const [formLoading, setFormLoading] = useState(true);\n  const [showFormError, setShowFormError] = useState(false);\n  const [showForm, setShowForm] = useState(false);\n  const [historyDataValue, setHistoryData] = useState([])\n   \n  var response;\n\n   \n   useEffect(() => {\n    getCloudData({\n        pre: () => setFormLoading(true),\n        tableName: 'UploadVideo',\n        validator: (response) => response?.result?.Count >= 0,\n        victory: (UploadVideo, textStatus, jqXHR) => {\n             response = UploadVideo.Items;\n             setHistoryData(response);\n             setFormLoading(false);\n             setShowForm(true);\n         \n        },\n         defeat: () => {\n               setFormLoading(false);\n               setShowFormError(true);\n          }\n    });\n}, [] \n)\nconst defaultSorted = [{\n  dataField: 'subject',\n  order: 'desc'\n}];\n\nconst options = {\n  paginationSize: 5,\n  pageStartIndex: 0,\n  firstPageText: '<<',\n  prePageText: 'Back',\n  nextPageText: '>',\n  lastPageText: '>>',\n  showTotal: true,\n  alwaysShowAllBtns: true,\n\n  sizePerPageList: [\n    {text: 'show 5', value: 5},\n    {text: 'show 10', value: 10},\n    {text: 'show 15', value: 15},\n  ],\n  onPageChange: function (page, sizePerPage)\n  {\n    console.log('page',page);\n    console.log('sizePerPage',sizePerPage);\n  },\n  onSizePerPageChange: function (page, sizePerPage)\n  {\n    console.log('page', page);\n    console.log('sizePerPage', sizePerPage);\n  }\n  \n};\n const columns = [\n        {dataField: 'subject', text: 'Subject'},\n        {dataField: 'videoTitle', text: 'Video Title'},\n        {dataField: 'bookName', text: 'Book Name'},\n        {dataField: 'chapterName', text: 'Chapter Name'},\n        {dataField: 'chapterNumber', text: 'Chapter Number'},\n        {dataField: 'chapterPart', text: 'Chapter Part'},\n        {dataField: 'videoDescription', text: 'Video Description'},\n        {dataField: 'tutorName', text: 'Tutor Name'},\n        {dataField: 'fileName', text: 'File Name'}\n    \n ];\nreturn (\n  \n  <div className=\"App\">\n    \n     <h3> Video Upload History </h3>\n    \n     <SpinnerText spinning={formLoading} label=\" loading history data\" />\n     {!formLoading && !showFormError && showForm && (\n               <BootstrapTable striped  keyField='uploadID' \n                   columns={ columns } \n                   data={historyDataValue} \n                   defaultSorted={defaultSorted}\n                   pagination={paginationFactory(options)} \n                   id=\"historyTable\"  />\n                 \n      )}\n\n  </div>\n  \n)\n\n}\nexport default HistoryPage;\n\n","import React from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Link, NavLink, Redirect, Route, Switch, useLocation } from 'react-router-dom';\nimport { ToastProvider } from 'react-toast-notifications';\nimport { TTBLogo } from '../components/shared/TTBLogo';\nimport sessionManager from '../utils/sessionManager';\nimport UploadPage from './UploadPage';\nimport HistoryPage from './HistoryPage';\n\nfunction ProtectedApp({ userData }) {\n    const location = useLocation();\n    const {email, name} = userData;\n    if (!email) {\n        return (\n            <Alert variant='warning'>\n                Some error getting your data.\n                Please <Link to='/login'> login again. </Link>\n            </Alert>\n        );\n    }\n\n    const displayedUserDetails =  name && email ? `${userData.name}(${userData.email})` : email;\n\n    return (\n        <>\n            <ToastProvider placement='bottom-center' >\n                <div className=\"d-flex flex-column app-ctr-lvl-1\">\n                    <Navbar bg=\"light\" expand=\"sm\" sticky=\"top\" className=\"top-nav\" >\n                        <Navbar.Brand>\n                            <TTBLogo />\n                        </Navbar.Brand>\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                        <Navbar.Collapse\n                            id=\"basic-navbar-nav\"\n                        >\n                            <Nav\n                                defaultActiveKey=\"/admin\"\n                                className=\"mr-auto\" \n                                style={{\n                                    marginLeft: 'auto',\n                                    marginRight: 'auto',\n                                }}>\n                                {\n                                    sessionManager.isTutor() && (\n                                        <>\n                                            <Nav.Link className={location.pathname === '/upload' ? 'active-top-route' : ''} href=\"/upload\">Upload</Nav.Link>\n                                            <Nav.Link className={location.pathname === '/history' ? 'active-top-route' : ''} href=\"/history\">History</Nav.Link>\n                                           \n                                            {/* <Nav.Item className='nav-link'>\n                                                <NavLink activeClassName=\"active-top-route\" to=\"/upload\" >Upload</NavLink>\n                                            </Nav.Item >\n                                            <Nav.Item className='nav-link'>\n                                                <NavLink activeClassName=\"active-top-route\" to=\"/history\" >History</NavLink>\n                                            </Nav.Item> */}\n                                        </>\n                                    )\n                                }\n                                {\n                                    sessionManager.isAdmin() &&\n                                    (\n                                        <Nav.Item className='nav-link'>\n                                            <NavLink activeClassName=\"active-top-route\" to=\"/admin\" >Administration</NavLink>\n                                        </Nav.Item>\n                                    )\n                                }\n                            </Nav>\n                                <Navbar.Text>\n                                    { displayedUserDetails }\n                                </Navbar.Text>\n                            <Nav>\n                                {/* <Nav.Item className='nav-link'>\n                                    <CopyToClipboard text={sessionManager.getAuthToken()}>\n                                        <Button size=\"sm\" variant=\"outline-dark\" > Copy JWT <span role='img' aria-label='key emoji'>🔑</span></Button>\n                                    </CopyToClipboard>\n                                </Nav.Item> */}\n                                <Nav.Link href=\"/logout\">Sign out</Nav.Link>\n                            </Nav>\n                        </Navbar.Collapse>\n                    </Navbar>\n                    <ProtectedAppBody userData={userData} />\n                    <footer style={{ \n                        marginTop: '4em'\n                    }}\n                    className=\"ttb-container\">\n                        <Container>\n                            <Row style={{\n                                display: 'block'\n                            }}>\n                                Turn the Bus is a registered 501 (c) (3) US nonprofit organization.\n                            </Row>\n                        </Container>\n                    </footer>\n                </div>\n            </ToastProvider>\n        </>\n    );\n}\n\nconst ProtectedAppBody = ({ userData }) => {\n    return (\n        <main className='flex-grow-1'>\n            <Switch>\n                <Route path=\"/upload\">\n                    <UploadPage />\n                </Route>\n                <Route path=\"/history\">\n                    <HistoryPage />\n                </Route>\n            </Switch>\n        </main>\n    )\n}\n\nexport const AdminRoute = ({ children, ...rest }) => {\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                sessionManager.isAdmin() ? (\n                    children\n                ) : (\n                        <Redirect\n                            to={{\n                                pathname: \"/login\",\n                                state: { from: location }\n                            }}\n                        />\n                    )\n            }\n        />\n    );\n}\n\nexport default ProtectedApp;\n","import { Auth } from 'aws-amplify';\nimport React, { useState } from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport { Link, useHistory } from 'react-router-dom';\nimport { SpinnerButton } from '../components/shared/SpinnerButton';\nimport { TTBLogo } from '../components/shared/TTBLogo';\nimport { setSessionCookie } from '../utils/sessions';\nimport { centerIt } from '../components/layout/Centered';\nimport { toUsername } from '../utils/formUtil';\n\nfunction LoginPage({ afterLogin }) {\n    const [email, setEmail] = useState('');\n    const [pass, setPass] = useState('');\n    const [submitting, setSubmitting] = useState(false);\n    const [status, setStatus] = useState({});\n    const history = useHistory();\n\n    const login = async (event) => {\n        event.preventDefault();\n        if (email && pass) {\n            try {\n                setSubmitting(true);\n                const signInResult = await Auth.signIn(toUsername(email), pass);\n                // const groups = signInResult?.signInUserSession?.accessToken?.payload['cognito:groups'] || [];\n                const token = signInResult?.signInUserSession?.idToken?.jwtToken || '';\n                const cookieObj = {\n                    email,\n                    name: signInResult?.attributes?.name,\n                    authToken: token,\n                    showWelcomeBanner: true\n                };\n                setSessionCookie(cookieObj);\n                afterLogin(cookieObj);\n                setSubmitting(false);\n                history.push('/upload');\n            } catch (error) {\n                console.error('error signing in', error);\n                setSubmitting(false);\n                if (error?.message === 'User is disabled.') {\n                    setStatus({\n                        type: 'warning',\n                        message: 'Your account is pending activation by administrators. 🔒'\n                    })\n\n                } else {\n                    setStatus({\n                        type: 'danger',\n                        message: `There was an error logging in.\n                        ${error?.message || ''}\n                        Please check console/network logs or contact administrators.`\n                    })\n                }\n            }\n        } else {\n            setStatus({\n                type: 'danger',\n                message: 'Some fields are missing'\n            })\n        }\n    };\n    return centerIt(\n                <>\n                    <TTBLogo />\n                    <h1>Video Upload Sign-in</h1>\n                    <Row className=\"h-100\">\n                        <Col>\n                            <Form>\n                                <Form.Group controlId=\"formBasicEmail\">\n                                    <Form.Label>Email address</Form.Label>\n                                    <Form.Control\n                                        disabled={submitting}\n                                        type=\"email\"\n                                        placeholder=\"Enter email\"\n                                        value={email}\n                                        onChange={e => setEmail(e.target.value)}\n                                        />\n                                </Form.Group>\n\n                                <Form.Group controlId=\"formBasicPassword\">\n                                    <Form.Label>Password</Form.Label>\n                                    <Form.Control\n                                        disabled={submitting}\n                                        type=\"password\"\n                                        placeholder=\"Password\"\n                                        onChange={e => setPass(e.target.value)} />\n                                </Form.Group>\n                                <SpinnerButton\n                                    spinning={submitting}\n                                    label=\"Login\"\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    onClick={e => login(e)}\n                                />\n                            </Form>\n                        </Col>\n                        <Col />\n                    </Row>\n                    <br />\n                    {\n                        status?.type && status?.message &&\n                        <Alert\n                            variant={status?.type || 'warning'}\n                        >\n                            {status?.message || 'Error submitting'}\n                        </Alert>\n                    }\n                    <br />\n                    <Link to=\"/register\">Register</Link>\n                    <br />\n                    <Link to=\"/verify\">Verify email</Link>\n                </>\n    );\n}\n\nexport default LoginPage;\n","import { Auth } from 'aws-amplify';\nimport Cookies from \"js-cookie\";\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { emptySessionObj } from '../utils/sessions';\n\nconst Logout = ({ afterLogout }) => {\n    let history = useHistory();\n\n    useEffect(\n        () => {\n            Cookies.remove(\"tutor-session\");\n            Auth.signOut();\n            afterLogout(emptySessionObj);\n            history.push(\"/login\");\n        },\n        [history, afterLogout]\n    );\n\n    return <div>Logging out!</div>;\n};\n\nexport default Logout;","import { Auth } from 'aws-amplify';\nimport React, { useState } from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport Form from 'react-bootstrap/Form';\nimport { Link, useHistory } from 'react-router-dom';\nimport { centerIt } from '../components/layout/Centered';\nimport { SpinnerButton } from '../components/shared/SpinnerButton';\nimport { TTBLogo } from '../components/shared/TTBLogo';\nimport { toUsername } from '../utils/formUtil';\n\n\n\nfunction RegistrationPage({ afterRegister }) {\n    const [email, setEmail] = useState('');\n    const [name, setName] = useState('');\n    const [pass, setPass] = useState('');\n    const [pass2, setPass2] = useState('');\n    const [submitting, setSubmitting] = useState(false);\n    const [status, setStatus] = useState({});\n    let history = useHistory();\n\n    let register = async (event) => {\n        event.preventDefault();\n        if (email && pass && pass2 && pass === pass2) {\n            try {\n                setSubmitting(true);\n                await Auth.signUp({\n                    username: toUsername(email),\n                    password: pass,\n                    attributes: {\n                        email,\n                        name\n                    }\n                });\n                setSubmitting(false);\n                afterRegister(email);\n                history.push('/verify');\n            } catch (error) {\n                setSubmitting(false);\n                console.error('error signing up:', error);\n                setStatus({\n                    type: 'danger',\n                    message: `There was an error registering.\n                    ${error?.message + '.' || ''}\n                     Please check console/network logs or contact administrators.`\n                })\n            }\n        } else {\n            setStatus({\n                type: 'danger',\n                message: 'Some fields are missing'\n            })\n        }\n    };\n    return centerIt(\n            <>\n                <TTBLogo />\n                <h1>Register</h1>\n                <Form>\n                    <Form.Group controlId=\"name\">\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control\n                            disabled={submitting}\n                            type=\"text\"\n                            placeholder=\"Enter your name\"\n                            value={name}\n                            onChange={e => setName(e.target.value)} />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"email\">\n                        <Form.Label>Email address</Form.Label>\n                        <Form.Control\n                            disabled={submitting}\n                            type=\"email\"\n                            placeholder=\"Enter email\"\n                            value={email}\n                            onChange={e => setEmail(e.target.value)} />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"pass\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control\n                            disabled={submitting}\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            onChange={e => setPass(e.target.value)} />\n                        <small id=\"titleHelpBlock\" className=\"form-text text-muted\">\n                            Minimum length: 8<br />\n                        At least 1 numerical character<br />\n                        At least 1 special character<br />\n                        At least 1 uppercase character<br />\n                        At least 1 lowercase character<br />\n                        </small>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"pass2\">\n                        <Form.Label>Re enter password</Form.Label>\n                        <Form.Control\n                            disabled={submitting}\n                            type=\"password\"\n                            placeholder=\"Re enter Password\"\n                            onChange={e => setPass2(e.target.value)} />\n                    </Form.Group>\n                    <SpinnerButton\n                        spinning={submitting}\n                        label=\"Register\"\n                        variant=\"primary\"\n                        type=\"submit\"\n                        onClick={e => register(e)}\n                    />\n                </Form>\n                <br />\n                {\n                    status?.type && status?.message &&\n                    <Alert\n                        variant={status?.type || 'warning'}\n                    >\n                        {status?.message || 'Error submitting'}\n                    </Alert>\n                }\n                <Link to=\"/verify\">Verify email</Link>\n                <br />\n                <Link to=\"/login\">Login</Link>\n            </>\n    );\n}\n\nexport default RegistrationPage;\n","/* eslint-disable jsx-a11y/accessible-emoji */\nimport { Auth } from 'aws-amplify';\nimport React, { useState } from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { Link } from 'react-router-dom';\nimport { TTBLogo } from '../components/shared/TTBLogo';\nimport { SpinnerButton } from '../components/shared/SpinnerButton';\nimport { centerIt } from '../components/layout/Centered';\nimport { toUsername } from '../utils/formUtil';\n\n\nfunction VerificationPage({ stickyEmail }) {\n    const [email, setEmail] = useState(stickyEmail || '');\n    const [code, setCode] = useState('');\n    const [submitting, setSubmitting] = useState(false);\n    const [status, setStatus] = useState({});\n\n    let register = async (event) => {\n        event.preventDefault();\n        if (email && code) {\n            try {\n                setSubmitting(true);\n                await Auth.confirmSignUp(toUsername(email), code);\n                setSubmitting(false);\n                setStatus({\n                    type: 'success',\n                    message: '✅ Your account has been verified. Please wait for admins to enable your account.'\n                })\n            } catch (error) {\n                console.error('error verifying:', error);\n                setSubmitting(false);\n                setStatus({\n                    type: 'danger',\n                    message: `There was an error verifying your account.\n                    ${error?.message || ''}\n                    Please check console/network logs or contact administrators.`\n                })\n            }\n        } else {\n            setStatus({\n                type: 'danger',\n                message: 'Some fields are missing'\n            })\n        }\n    };\n    return centerIt(\n            <>\n                <TTBLogo />\n                <h1>Email Verification</h1>\n                <p>\n                    We have sent an email with the verification code to your registered email address. 📬\n                </p>\n                <Form>\n                    <Form.Group controlId=\"email\">\n                        <Form.Label>Email address</Form.Label>\n                        <Form.Control\n                            disabled={submitting}\n                            type=\"email\"\n                            placeholder=\"Enter email\"\n                            value={email}\n                            onChange={e => setEmail(e.target.value)} />\n                    </Form.Group>\n                    <Form.Group controlId=\"code\">\n                        <Form.Label>Verification Code</Form.Label>\n                        <Form.Control\n                            disabled={submitting}\n                            type=\"text\"\n                            placeholder=\"Enter the code sent to your email address\"\n                            value={code}\n                            onChange={e => setCode(e.target.value)} />\n                    </Form.Group>\n                    <SpinnerButton\n                        spinning={submitting}\n                        label=\"Verify Email\"\n                        variant=\"primary\"\n                        type=\"submit\"\n                        onClick={e => register(e)}\n                    />\n                </Form>\n                <br />\n                {\n                    status?.type && status?.message &&\n                    <Alert\n                        variant={status?.type || 'warning'}\n                    >\n                        {status?.message || 'Error submitting'}\n                    </Alert>\n                }\n                <br />\n                <Link to=\"/login\">Login</Link>\n                <br />\n                <Link to='/register'>Register</Link>\n            </>\n    );\n}\n\nexport default VerificationPage;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\nimport ProtectedApp from './routes/ProtectedApp';\nimport LoginPage from './routes/LoginPage';\nimport Logout from './routes/Logout';\nimport RegistrationPage from './routes/RegistrationPage';\nimport VerificationPage from './routes/VerificationPage';\nimport sessionManager from './utils/sessionManager';\nimport { getSessionCookie } from './utils/sessions';\n\n\nconst Routes = () => {\n    const [userData, setUserData] = useState(getSessionCookie());\n    const [stickyEmail, setStickyEmail] = useState();\n\n    return (\n        <Router basename=\"/tutor-app\">\n            <Switch>\n                <Route exact path=\"/login\" >\n                    <LoginPage afterLogin={setUserData} />\n                </Route>\n                <Route exact path=\"/register\" >\n                    <RegistrationPage afterRegister={setStickyEmail} />\n                </Route>\n                <Route exact path=\"/verify\" >\n                    <VerificationPage stickyEmail={stickyEmail} />\n                </Route>\n                <Route exact path=\"/logout\">\n                    <Logout afterLogout={setUserData} />\n                </Route>\n                <ProtectedRoute path=\"/*\">\n                    <ProtectedApp userData={userData} />\n                </ProtectedRoute>\n            </Switch>\n        </Router>\n    );\n}\n\nconst ProtectedRoute = ({ children, ...rest }) => {\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                sessionManager.isAuthenticated() ? (\n                    children\n                ) : (\n                        <Redirect\n                            to={{\n                                pathname: \"/login\",\n                                state: { from: location }\n                            }}\n                        />\n                    )\n            }\n        />\n    );\n}\n\nexport default Routes;","import Amplify, { Auth } from 'aws-amplify';\nimport AWS_CONFIG from './config/awsConfig';\nimport React from 'react';\nimport Routes from \"./Routes\";\nimport './App.css';\n\nAmplify.configure({\n  Auth: AWS_CONFIG.cognito,\n});\n\nAuth.configure();\n\nconst App = () => (\n  <Routes />\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}